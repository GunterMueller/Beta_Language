ORIGIN 'fragparser';
INCLUDE 'compile';
INCLUDE '~beta/basiclib/current/file';
INCLUDE 'systemjob';
INCLUDE 'machine';
--- FragparserReadHeaders: ObjectDescriptor ---
(#
   next: @integer;
   PropertyName: (# do exit 0 #);
   StringList: (# do exit 1 #);
   IntegerList: (# do exit 2 #);
   AnyValue: (# do exit 3 #);
   FragmentSeen: (# do exit 4 #);
   IncludeOrFragment: (# do exit 5 #);
   MDListStart: (# do exit 6 #);
   MDListNo: (# do exit 7 #);
   MDListYes: (# do exit 8 #);

   bf: ^BETAfile;
   property: @integer;
   pname,mname: @text;
   checkRecomp:
     (# bf: ^BETAfile
     enter bf[]
     do
        l: (if bf.timeBet > timeH then
	   true->needsRecomp
	else
	   (if bf.origin[]<>bf[] then bf.origin[]->&checkRecomp if);
	   (for i:bf.ninclude repeat
	      (if needsRecomp then leave l if); bf.include[i]->&checkRecomp;
	   for);
	if);
     #);

   mdhandler: (# t: ^text; finish:< object enter t[] do INNER #);
   mdh: ^mdhandler;
   objfile: mdhandler (# do (t[],basis[])->fc.convertFilePath->ol.insert #);
   linkopt: mdhandler (# do 1->mi.lopt.extend; t[]->mi.lopt[mi.lopt.range][] #);
   cinc: mdhandler
     (#
     do
        1->cinclude.extend;
	(t[],basis[])->fc.convertFilePath->cinclude[cinclude.range][];
     #);
   build: mdhandler
     (#
	files: [0] ^text;
	dir: ^text;
	finish::
	  (#
	     e: @diskEntry;
	     t: ^text;
	     time: @integer;
	     doit: @boolean;
	  do
	     basis[]->dir[];
	     (if files.range<1 then
		'No destination file or no compiler command given in "build" directive!'->error;
	     else
		(for i:files.range-1 repeat
		   (files[i][],basis[])->fc.convertFilePath->t[]->e.path;
		   l: (if i=1 then
		      (if e.exists then e.modTime->time else true->doit if);
		      t[]->ol.insert;
		   else
		      (if not e.exists then
			 'File "'->t.prepend;
			 '" cannot be accessed!'->t.append;
			 t[]->error;
			 leave l;
		      if);
		      (if e.modTime>time then true->doit if);
		   if);
		for);
		(if doit then &callCompiler[]->el.insert if);
	     if);
	  #);
	callCompiler:
	  (#
	     job: @systemJob (# searchPath:: trueObject #);
	     flag: @boolean;
	     state: @integer;
	     total: ^text;
	     arg: ^text;
	     vname: ^text;
	     fileno: @integer;

	     (* possible states:
	      * 0: skipping white space
	      * 1: reading a token
	      * 2: just seen a $ sign
	      * 3: reading a numerical variable name (like $0, $1, ...)
	      * 4: reading an identifier as a variable name
	      *)
	  do
	     job.init;
	     0->state;
	     'Running command: '->total[];
	     (' '->(files[files.range].copy).append).scanAll
	       (#
	       do
		  l: (if state>=2 then
		     (if (ch->ascii.isdigit) then
			(if state=2 then 3->state; 0->fileno if);
			(if state=3 then 10*fileno + (ch-'0')->fileno if);
			ch->vname.put;
		     else
			(if state=3 then
			   (* end of a digit variable name *)
			   fileno+1->fileno;
			   (if fileno>=files.range then
			      'Positional parameter index too high!'->error;
			   else
			      files[fileno][]->arg.append;
			   if);
			   1->state;
			   restart l;
			else
			   (if (ch->ascii.isLetter) or (ch='_') then
			      4->state;
			      ch->vname.put;
			   else
			      (* we reached the end of the string *)
			      (if state=2 then
				 (if ch='$' then
				    '.'->arg.append;
				 else
				    'Unknown variable name "'->vname[];
				    ch->vname.put;
				    '"!'->vname.append->error;
				 if);
				 1->state;
			      else
				 (if 'CC'->vname.equal then
				    mi.ccomp[]->arg.append;
				 else
				    'Unknown variable name "'->vname.prepend;
				    '"!'->vname.append->error;
				 if);
				 1->state;
				 restart l;
			      if);
			   if);
			if);
		     if);
		  else
		     (* not in variable name *)
		     (if (ch=' ') or (ch='\t') or (ch='\r') or (ch='\n') then
			(if state<>0 then
			   0->state;
			   (if flag then
			      arg[]->job.arg;
			   else
			      arg[]->job.executable; true->flag;
			   if);
			   ' '->total.put;
			   arg[]->total.append;
			if);
		     else
			(if state<>1 then 1->state; &text[]->arg[] if);
			(if ch='$' then
			   2->state; &text[]->vname[];
			else
			   ch->arg.put;
			if);
		     if);
		  if);
	       #);
	     (if not flag then
	        'No executable name given in command string!'->error
	     if);
	     (if errs=0 then
	        total[]->screen.putline;
	        dir[]->job.cd;
		job.run;
		(if job.status<>0 then
		   'Command exited with status '->arg[];
		   job.status->arg.putint;
		   '!'->arg.put;
		   arg[]->error;
		if);
	     if);
	     (if errs<>0 then (Failure, 'Stopping due to errors.')->stop if);
	  #);
     do 1->files.extend; t[]->files[files.range][];
     #);
do
   0->ninclude;
   NONE->origin[];
   f.openread;
   1->line->col;
   PropertyName->next;
   loop: (if gettoken
     // token.eos then
        'Unexpected End Of File!'->error; leave loop
     // token.name then
	(if next
	  // PropertyName then
	     gettoken.s->pname;
	     (if true
	       // 'origin'->pname.equalNCS then 0->property; StringList->next
	       // 'include'->pname.equalNCS then 1->property; StringList->next
	       // 'body'->pname.equalNCS then 2->property; StringList->next
	       // 'build'->pname.equalNCS then
		  3->property; MDListStart->next; &build[]->mdh[];
	       // 'cinclude'->pname.equalNCS then
		  3->property; MDListStart->next; &cinc[]->mdh[];
	       // 'objfile'->pname.equalNCS then
		  3->property; MDListStart->next; &objfile[]->mdh[];
	       // 'linkopt'->pname.equalNCS then
		  3->property; MDListStart->next; &linkopt[]->mdh[];
	       else
		  'Warning: unknown property \''->errstream.puttext;
		  pname[]->errstream.puttext;
		  '\' ignored!\n'->errstream.puttext;
		  AnyValue->next;
		  -1->property;
	     if);
	     (if (property<>0) and (origin[]=NONE) then leave loop if);
	  // FragmentSeen then
	     IncludeOrFragment->next;
	     gettoken.s->pname;
	  // MDListStart
	  // MDListNo then
	     gettoken.s->mname;
	     (if mname[]->mi.match then MDListYes->next else MDListNo->next if);
	  // MDListYes then mdh.finish; AnyValue->next
	  // AnyValue then (* do nothing *)
	  else 'Unexpected name!'->error;
	if);
	restart loop
     // token.intConst then
        (if next
	  // IntegerList then
	  // AnyValue then (* do nothing *)
	  else 'Unexpected integer value!'->error;
        if);
	restart loop
     // token.textConst then
        (if next
	  // StringList then
	     (if property
	       // 0 then
	          (if origin[]<>NONE then
		     'Multiple ORIGIN!'->error; leave loop
		  if);
		  (gettoken.s.copy,basis[],needsRecomp)->compilefile
		    (#
		    do
		       (if (bf[]<>this(BETAfile)[]) then
			  (* default action: complain about circularity! *)
		       else
			  (if mainorigin[]=NONE then
			     (* we found the main origin *)
			     bf[]->mainorigin[];
			  if);
			  (if bf[]<>mainorigin[] then
			     'Only one file can have itself as origin!'->error;
			     leave loop;
			  if);
		          Ignore->action;
		       if);
		    #)->origin[];
		  (if not needsRecomp then origin[]->checkRecomp if);
	       // 1 then
	          (gettoken.s.copy,basis[],needsRecomp)->compilefile->bf[];
		  (if not needsRecomp then bf[]->checkRecomp if);
		  ninclude+1->ninclude;
		  (if ninclude >= include.range then 5->include.extend if);
		  bf[]->include[ninclude][];
	       // 2 then (gettoken.s.copy,basis[])->markfile
	     if)
	  // IncludeOrFragment then
	     (if 'include'->pname.equalNCS then
	        1->property;
		StringList->next;
	     else
	        'Syntax error!'->error;
	     if);
	  // MDListYes then gettoken.s.copy->mdh
	  // MDListNo
	  // AnyValue then (* do nothing *)
	  else 'Unexpected string value!'->error;
        if);
	restart loop
     // token.colon then
        (if next = IncludeOrFragment then
	   pname->firstFragName;
	   leave loop;
	else
	   'A \':\' is not expected here!'->error;
	if);
	restart loop
     // token.semicolon then
        (if next
	// MDListYes then mdh.finish; PropertyName->next
	// StringList
	// IntegerList
	// MDListNo
	// AnyValue then PropertyName->next;
	else 'A \';\' is not expected here!'->error;
	if);
	restart loop
     // token.fragment then
	(if (property<>0) and (origin[]=NONE) then leave loop; if);
        (if (next=FragmentSeen) or (next=IncludeOrFragment) then
	   'Starting a fragment in a fragment?'->error
	else
	   FragmentSeen->next
	if);
	restart loop
     // token.fragblock then
        (if next=FragmentSeen then
	   PropertyName->next
	else
	   'Unexpected [[!'->error
	if);
	restart loop
     if);

   (if origin[]=NONE then
      'The first property specified must be ORIGIN!'->error;
   if)
#)


--- FragparserGettoken: ObjectDescriptor ---
(# s: @text; c: @char; tok: @integer
do
   ''->s;
   token.eos->tok;
   loop: (#
     do
	(if f.eos then leave loop if);
	f.peek->c;
	(if tok
	  // token.name then
	     (if (c->ascii.isLetter) or (c->ascii.isDigit) or (c = '_') then
		advance->s.put; restart loop
	     if);
	  // token.intConst then
	     (if (c->ascii.isDigit) then advance->s.put; restart loop if)
	  // token.textConstStart then
	     advance;
	     (if c='\'' then
		token.textConst->tok; restart loop
	     else
		c->s.put;
		(if c='\\' then token.textConstBackslash->tok if);
		restart loop
	     if);
	  // token.textConstBackslash then
	     advance->s.put; token.textConstStart->tok
	  // token.textConst then
	     (* string with double '' in the middle - replace by single ' *)
	     (if c='\'' then
		advance->s.put;
		token.textConstStart->tok;
		restart loop
	     if);
	  // token.fragmentStart then
	     (if c='-' then
		advance; token.fragment->tok; restart loop
	     else
		'Single \'-\'!'->error; token.eos->tok; restart loop
	     if);
	  // token.fragment then
	     (if c='-' then advance; restart loop if)
	  // token.fragblock then
	     (if c='[' then
		advance
	     else
		'Single ''[''!'->error; token.eos->tok; restart loop
	     if);
	  // token.eos then
	     advance;
	     (if true
	       // (c->ascii.isLetter) or (c = '_') then
		  c->s.put; token.name->tok; restart loop
	       // c->ascii.isDigit then c->s.put; token.intConst->tok
	       // c='''' then token.textConstStart->tok; restart loop
	       // c=':' then token.colon->tok
	       // c=';' then token.semicolon->tok
	       // c='-' then token.fragmentStart->tok; restart loop
	       // c='[' then token.fragblock->tok; restart loop
	       // c->ascii.isSpace then restart loop
	       else 'Unknown character!'->error; restart loop
	     if);
	if)
     #);
   (if tok
     // token.textConstBackslash
     // token.textConstStart then
	'Unfinished string constant!'->error;
	token.eos->tok
     // token.fragmentStart then
	token.eos->tok
   if);
exit tok
#)
