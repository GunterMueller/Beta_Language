ORIGIN 'bfile';
INCLUDE '~beta/basiclib/current/external';
INCLUDE '~beta/sysutils/current/objinterface';
OBJFILE default 'parse.o';
BODY 'parserbody';
BODY 'fragparser';
MAKE default 'parse.make';
--- BETAfileParser: ObjectDescriptor ---
(#
   <<SLOT ParserLib: AttributeDecl>>;
   res: @integer;
   stack: [128] ^BETAterm;
   stackptr: @integer;
   push:
     (# el: ^BETAterm
     enter el[]
     do
	stackptr+1->stackptr;
	(if stackptr>=stack.range then stack.range/2->stack.extend if);
	el[]->stack[stackptr][];
     #);
   pop:
     (#
     do
	(if stackptr<=0 then
	   (failureTrace,'Popping too many elements of object stack!')
	     ->Stop
	if);
	stackptr-1->stackptr;
     exit stack[stackptr+1][]
     #);

   (* linked list of all objects generated by this parser *)
   (*
   LLbody: (# el: ^BETAterm; nx: ^LLbody #);
   last: ^BETAterm;
   LL: @LLbody
     (#
	insert:
	  (# n: @LLbody
	  enter n.el[]
	  do n.el[]->last[]; nx[]->n.nx[]; n[]->nx[]
	  #)
     #);
   *)

(* initialize and run this parser *)
do
   true->active;
   0->stackptr;
   (* this slot first parses the directives at the beginning of each
    * source file, then the source files themselves *)
   <<SLOT FragmentLanguageParser: ObjectDescriptor>>;
   (if res = 1 then
      'Cannot read file "'->puttext; filename[]->puttext; '"!'->putline
   if);
   false->active;
exit res
#)
--- ParserLib: attributes ---
parser2beta0: external (# do cExternalEntry; INNER #);
parser2beta1: external
  (# arg1: @integer enter (arg1) do cExternalEntry; INNER #);
parser2beta2: external
  (# arg1, arg2: @integer enter (arg1, arg2) do cExternalEntry; inner #);
parser2beta3: external
  (# arg1, arg2, arg3: @integer
  enter (arg1, arg2, arg3)
  do cExternalEntry; inner
  #);
install2beta0: external (# i: @integer; ptr: ##parser2beta0 enter (i, ptr##) #);
install2beta1: external (# i: @integer; ptr: ##parser2beta1 enter (i, ptr##) #);
install2beta2: external (# i: @integer; ptr: ##parser2beta2 enter (i, ptr##) #);
install2beta3: external (# i: @integer; ptr: ##parser2beta3 enter (i, ptr##) #);
parsefile: external
  (# fd,line,i: @integer; fn: [1] @char enter (fd,fn,line) exit i #);
cstring:
  (# str: @externalRecord; c: @char; i: @integer; res: @text
  enter str.ptr
  do
     res.clear;
     (if str.ptr<>0 then
	0->i;
	loop: (if (i->str.getByte->c)<>0 then
	   c->res.put; i+1->i; restart loop
	if)
     if)
  exit res
  #);
init: (# <<SLOT ParserInit: DoPart>> #);
