(* FILE aex4.gb *)
-- betaenv:descriptor --
(#
   (* This shows how specialization of nested
    * patterns ('role1' and 'role2') can be used
    * to "fill in the roles" with properties which are
    * declared elsewhere, namely the 'LaurenceOlivier'
    * and 'Madonna' patterns.  This is role playing
    * at the static level, since both the roles and
    * the actors are patterns, and the are combined
    * as patterns, and then instances are created of
    * the combined patterns.
    *)
   
   actor: 
     (# name:< string;
        limps:< boolean;
        deaf:< boolean;
        speak: (# do '\n'+name+': '->stdio; INNER #);
        answer: speak
          (# do (if deaf then 'Er..?'->stdio else 'Yes, quite so.'->stdio if);
             (if limps then '   .. Ouch, my leg!!'->stdio if)
          #)
     #);
   
   play: 
     (# role1:< actor(# name::(# do 'Hamlet'->value #)#);
        role2:< actor(#  name::(# do 'Ophelia'->value #)#);
        r1: @role1; 
        r2: @role2; 
     do r1.speak(# do 'Oh, I love You, '+r2.name+'!'->stdio #)
          ->r2.answer;
        r2.speak
        (# do r1.name+', are you still seeing that Leigh woman?'->stdio #)
          ->r1.answer
     #);
   
   LaurenceOlivier: actor(# deaf::(# do true->value #)#);
   Madonna: actor(# limps::(# do true->value #)#);
   myPlay: play(# role1::LaurenceOlivier; role2::Madonna #)
do 
   myPlay
#)
