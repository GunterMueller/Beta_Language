(* Note that this program is not type safe; the problem is that it 
 * is not known at the statement 'this(symmetricCoroutine)[]->next[]'
 * that 'this(symmetricCoroutine)' is actually a 'component'.  It 
 * must be a component, because 'next' is declared with '^|'.  Also
 * note that this is a problem that cannot be solved in BETA, but in 
 * gbeta where 'component' is a pattern we may specify the pattern
 * 'symmetricCoroutine' such that it is guaranteed to be a component.
 * Take a look at 036x.gb to see how to do this. *)
-- betaenv:descriptor --
(# 
   cycle: (# do INNER; restart cycle #);
   getch: 
     (# s: @string 
     do stdio->s; (if s.length=0 then SUSPEND (* kill *) if)
     exit 1->s.at 
     #);
   symmetricCoroutineSystem:
     (# symmetricCoroutine: 
          (# resume:< 
               (# 
               do this(symmetricCoroutine)[]->next[];
                  SUSPEND
               #)
          do INNER
          #);
        next: ^|symmetricCoroutine;
        run: cycle
          (# active: ^|symmetricCoroutine (* currently running *)
          enter next[]
          do (if (next[]->active[])=NONE then 
                 leave run
             if);
             NONE->next[];
             active; (* attach next component *)
             (* active 'SUSPEND'ed, 'Resumed', or terminated *)
          #)
     do INNER
     #);
   converter: @symmetricCoroutineSystem
     (# doubleA2B: @|symmetricCoroutine
          (# ch: @char
          do cycle
             (# 
             do getch->ch;
                (if ch='a' then 
                    getch->ch;
                    (if ch='a' then 'b'->doubleB2C.resume else
                        'a'->doubleB2C.resume;
                        ch->doubleB2C.resume
                    if)
                 else
                    ch->doubleB2C.resume
                if)
             #)
          #);
        doubleB2C: @|symmetricCoroutine
          (# ch: @char;
             resume::(# enter ch #)
          do cycle
             (#
             do (if ch
                 // 'b' then 
                    doubleA2B.resume;
                    (if ch='b' then 'c'->stdio else
                        'b'->stdio;
                        ch->stdio
                    if)
                 // '\n' then 
                    SUSPEND
                 else
                    ch->stdio
                if);
                doubleA2B.resume
             #)
          #)
     do doubleA2B[]->run
     #)
do 
   'Enter one character + [ENTER] at a time; empty input quits;\n'->stdio;
   'on the fly, "aa" becomes "b" and "bb" becomes "c".\n\n'->stdio;
   converter
#) 

