contractioncategories
   MainPart Attributes Imperatives

-- gbeta:aGrammar:metagrammar --

Grammar gbeta:

Option
  version  = 21
  comBegin = '(*'
  comEnd   = '*)'
  stringChar = '\''
  suffix = '.gb'

Rule
  <BetaForm> ::| <DescriptorForm> | <AttributesForm>;

  <DescriptorForm> ::= <ObjectDescriptor>;

  <AttributesForm> ::= <Attributes>;

  <ObjectDescriptor> ::= <PrefixOpt> <MainPart>;

  <MainPart> ::| <LongMainPart> | <ShortMainPart>;
  <LongMainPart> ::= '(#' <Attributes> <ActionPart> '#)';
  <ShortMainPart> ::= '{' <Attributes> <ActionPart> '}';

  <Attributes> ::+ <AttributeDeclOpt> ';';

  <PrefixOpt> ::? <Prefix>;

  <Prefix> ::| <SimplePrefix> | <CompositePrefix>;

  <SimplePrefix> ::= <AttributeDenotation>;

  <CompositePrefix> ::= '(' '&' <Merge> '&' ')';

  <AttributeDeclOpt> ::? <AttributeDecl>;

  <AttributeDecl> ::| <PatternDecl>
                    | <SimpleDecl>
                    | <RepetitionDecl>
                    | <VirtualDecl>
                    | <BindingDecl>
                    | <FinalDecl>
                    | <ErrorDecl>;

  <PatternDecl> ::= <Names> ':' <Merge>;

  <SimpleDecl>  ::= <Names> ':' <ReferenceSpecification>;

  <RepetitionDecl>::= <Names> ':' '[' <Index> ']' <ReferenceSpecification>;

  <VirtualDecl> ::= <Names> ':' '<' <DisownOpt> <Merge>
                    <RestrictionOpt>;

  <BindingDecl> ::= <Names> ':' ':' '<' <SwapOpt> <DisownOpt> <Merge>
                    <RestrictionOpt>;

  <FinalDecl> ::= <Names> ':' ':' <SwapOpt> <Merge>;

  <DisownOpt> ::? <Disown>;
  <Disown> ::= '-';

  <SwapOpt> ::? <Swap>;
  <Swap> ::= '!';

  <RestrictionOpt> ::? <RestrictionPart>;
  <RestrictionPart> ::= ':' '>' <Restrictions>;
  <Restrictions> ::+ <Restriction> ',';
  <Restriction> ::= <AttributeDenotation>;

  <VariablePattern> ::=  '##' <AttributeDenotation>;

  <ReferenceSpecification> ::| <StaticItem>
                             | <VirtualStaticItem>
                             | <FinalStaticItem>
                             | <DynamicItem>
                             | <StaticComponent>
                             | <DynamicComponent>
                             | <VariablePattern>;

  <StaticItem> ::= '@' <Merge>;

  <VirtualStaticItem> ::= '<' <DisownOpt> '@' <AttributeDenotation>;
  <FinalStaticItem> ::= ':' '@' <Merge>;

  <DynamicItem> ::= '^' <ExactOpt> <AttributeDenotation>;

  <ExactOpt> ::? <Exact>;
  <Exact> ::= '=';

  <StaticComponent> ::= '@' '|' <Merge>;

  <DynamicComponent> ::= '^' '|' <ExactOpt> <AttributeDenotation>;

  <ObjectSpecification> ::| <ObjectDescriptor>
                          | <AttributeDenotation>;

  <Merge> ::+ <ObjectSpecification> '&';

  <Index> ::| <SimpleIndex> | <NamedIndex>;

  <NamedIndex> ::= <NameDcl> ':' <Evaluation>;

  <ActionPart> ::= <EnterPartOpt> <DoPartOpt> <ExitPartOpt>;

  <EnterPartOpt> ::? <EnterPart>;
  <DoPartOpt> ::? <DoPart>;
  <ExitPartOpt> ::? <ExitPart>;

  <EnterPart> ::= 'enter' <Evaluation>;
  <DoPart> ::= 'do' <Imperatives>;
  <ExitPart> ::= 'exit' <Evaluation>;

  <Imperatives> ::+ <ImpOpt> ';';
  <ImpOpt>      ::? <Imp>;

  <Imp> ::| <LabelledImp>
          | <LeaveImp>
          | <RestartImp>
          | <InnerImp>
          | <SuspendImp>
          | <Evaluation>
          | <WhileImp>
          | <WhenImp>
          | <CodeImp>
          | <ErrorImp>;

  <LabelledImp> ::= <NameDcl> ':' <Imp>;

  <ForImp> ::= '(' 'for' <Index> <RepDo> <Imperatives> 'for' ')';
  <RepDo> ::| <Rep> | <Doit>;
  <Rep> ::= 'repeat';
  <Doit> ::= 'do';

  <WhileImp> ::= '(' 'while' <Evaluation> <RepDo> <Imperatives> 'while' ')';

  <GeneralIfImp> ::= '(' 'if' <Evaluation>
                         <Alternatives>
                         <ElsePartOpt>
                     'if' ')';

  <SimpleIfImp> ::= '(' 'if' <Evaluation> 'then'
                        <Imperatives>
                        <ElsePartOpt>
                    'if' ')';

  <WhenImp> ::= '(' 'when' <NameDcl> ':' <AttributeDenotation>
                    <WhenAlternatives>
                    <ElsePartOpt>
                'when' ')';

  <LeaveImp> ::= 'leave' <ScopeSpecOpt>;
  <RestartImp>  ::= 'restart' <ScopeSpecOpt>;
  <InnerImp>     ::= 'inner' <ScopeSpecOpt>;

  <ScopeSpecOpt>     ::? <ScopeSpec>;
  <ScopeSpec>        ::| <IntegerScopeSpec> | <NameAplScopeSpec>;
  <IntegerScopeSpec> ::= <IntegerConst>;
  <NameAplScopeSpec> ::= <NameApl>;

  <SuspendImp>  ::= 'suspend';

  <CodeImp>     ::= '(' 'code' <CodeItems> 'code' ')';

  <Alternatives> ::+ <Alternative>;
  <Alternative> ::= <Selections> 'then' <Imperatives>;

  <Selections>::+ <Selection>;
  <Selection> ::| <CaseSelection>;

  <CaseSelection> ::= '//' <Evaluation>;

  <WhenAlternatives> ::+ <WhenAlternative>;
  <WhenAlternative> ::= '//' <ExactOpt> <AttributeDenotation>
                        'then' <Imperatives>;

  <ElsePartOpt>  ::? <ElsePart>;
  <ElsePart>    ::= 'else' <Imperatives>;

  <Evaluations> ::+ <Evaluation> ',';

  <Evaluation>  ::| <Expression>
                  | <AssignmentEvaluation>;

  <AssignmentEvaluation> ::= <Evaluation> '->' <Transaction>;

  <Transaction> ::| <Reference>
                  | <ObjectReference>
                  | <EvalList>
                  | <StructureReference>
                  | <Primitive>
                  | <Address>
                  | <ForImp>
                  | <SimpleIfImp>
                  | <GeneralIfImp>;

  <Reference> ::| <ObjectDenotation>
                | <DynamicObjectGeneration>
                | <ComputedObjectEvaluation>
                | <RepetitionSlice>;

  <DynamicObjectGeneration> ::| <DynamicItemGeneration>
                              | <DynamicComponentGeneration>;

  <ObjectDenotation> ::= <Merge>;
  <ComputedObjectEvaluation> ::= <Reference> '!';
  <ObjectReference> ::= <Reference> '[]';
  <StructureReference> ::= <Merge> '##';
  <EvalList>    ::= '(' <Evaluations> ')';
  <DynamicItemGeneration> ::= '&' <Merge>;
  <DynamicComponentGeneration> ::= '&' '|' <Merge>;
  <Primitive>   ::= 'tos' <SimpleEntry>;
  <Address>     ::= '@@'  <AttributeDenotation>;

  <AttributeDenotation>::| <NameApl>
                         | <Remote>
                         | <ComputedRemote>
                         | <Indexed>
                         | <ThisObject>
                         | <QualifiedAttrDen>
                         | <RemotePrimitive>;

  <Remote> ::= <AttributeDenotation> '.' <NameApl>;
  <ComputedRemote> ::= '(' <Evaluations> ')' '.' <NameApl>;
  <Indexed> ::= <AttributeDenotation> '[' <Evaluation> ']';

  <ThisObject> ::= 'this' '(' <ScopeSpecOpt> ')';

  <QualifiedAttrDen> ::= <AttributeDenotation> '(' ':' <Merge> ':' ')';
  <RemotePrimitive> ::= <AttributeDenotation> '.%' <NameApl>;

  <Expression>  ::| <RelationalExp> | <SimpleExp>;

  <RelationalExp>::| <EqExp> | <LtExp> | <LeExp>
                   | <GtExp> | <GeExp> | <NeExp>;

  <SimpleExp>   ::| <AddExp> | <SignedTerm> | <Term>;

  <AddExp>      ::| <PlusExp> | <MinusExp> | <OrExp> | <XorExp>;

  <SignedTerm> ::| <UnaryPlusExp> | <UnaryMinusexp>;

  <Term>        ::| <MulExp> | <Factor>;

  <MulExp>      ::| <TimesExp> | <RealDivExp> | <IntDivExp>
                  | <ModExp> | <AndExp> | <PrimitiveExp>;

  <EqExp> ::= <Operand1:SimpleExp> '=' <Operand2:SimpleExp>;
  <LtExp> ::= <Operand1:SimpleExp> '<' <Operand2:SimpleExp>;
  <LeExp> ::= <Operand1:SimpleExp> '<=' <Operand2:SimpleExp>;
  <GtExp> ::= <Operand1:SimpleExp> '>' <Operand2:SimpleExp>;
  <GeExp> ::= <Operand1:SimpleExp> '>=' <Operand2:SimpleExp>;
  <NeExp> ::= <Operand1:SimpleExp> '<>' <Operand2:SimpleExp>;

  <PlusExp>     ::= <SimpleExp> '+' <Term>;
  <MinusExp>    ::= <SimpleExp> '-' <Term>;
  <OrExp>       ::= <SimpleExp> 'or' <Term>;
  <XorExp>       ::= <SimpleExp> 'xor' <Term>;

  <UnaryPlusExp> ::= '+' <Term>;
  <UnaryMinusExp> ::= '-' <Term>;

  <TimesExp>    ::= <Term> '*' <Factor>;
  <RealDivExp>  ::= <Term> '/' <Factor>;
  <IntDivExp>   ::= <Term> 'div' <Factor>;
  <ModExp>      ::= <Term> 'mod' <Factor>;
  <AndExp>      ::= <Term> 'and' <Factor>;

  <PrimitiveExp> ::= <Term> '%' <NameApl> <Factor>;

  <Factor>      ::| <TextConst>
                  | <IntegerConst>
                  | <NotExp>
                  | <NoneExp>
                  | <Transaction>
                  | <UnaryPrimitiveExp>;

  <RepetitionSlice> ::= <AttributeDenotation>
                        '[' <Low:Evaluation> ':' <High:Evaluation> ']';
  <NotExp>      ::= 'not' <Factor>;
  <NoneExp>     ::= 'none';
  <UnaryPrimitiveExp> ::= '%' <NameApl> <Factor>;

  <Names> ::+ <NameDcl> ',';
  <NameDcl> ::= <NameDecl>;
  <NameApl> ::= <NameAppl>;

  <SimpleEntry> ::? <TextConst>;
  <TextConst>   ::= <String>;
  <IntegerConst> ::= <Const>;

  <SimpleIndex> ::= <Evaluation>;

  <CodeItems> ::+ <CodeItem> ',';
  <CodeItem>    ::| <CodeString> | <CodeConst>;
  <CodeString>  ::= <String>;
  <CodeConst>   ::= <Const>;

(* now for the errorproductions *)
  <ErrorDecl>   ::= Error;
  <ErrorImp>    ::= Error

Attribute
