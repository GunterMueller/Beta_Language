(* FILE "./private/ibetaOnelib.bet"
 *
 * Copyright (C) 1997-2001 Erik Ernst
 *
 * This file is part of "gbeta" -- a generalized version of the
 * programming language BETA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is destributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * Among other things, the copyright notice and this notice must be
 * preserved on all copies.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program, probably in a file named COPYING; if not,
 * write to the Free Software Foundation, Inc., 675 Mass Ave,
 * Cambridge, MA 02139, USA.
 *
 * To contact the author by email: eernst@cs.auc.dk
 *
 * To contact the author by snail-mail:
 *    Erik Ernst
 *    Department of Computer Science
 *    University of Aalborg
 *    DK-9220 Aalborg OE
 *    Denmark
 *
 * $Id: ibetaOnelib.bet,v 1.22 2001/07/01 21:44:11 eernst Exp $
 *)

ORIGIN '../ibetaOne';
INCLUDE '../ibetaSType';
INCLUDE 'ibetaCommonlib';
BODY 'ibetaOnelibbody'

-- IndexEntityLib:attributes --

step: 
  (* Increase this index to the next value *)
  (# <<SLOT IndexEntityStep:dopart>> #)

-- RepetitionEntityLib:attributes --

renewEntries:
  (# thrd: ^thread;                     (* Current thread of execution *)
     unwind: ##stackUnwinder;
     lo,hi: @integer
  enter (thrd[],unwind##,lo,hi)
  <<SLOT RepetitionEntityRenewEntries:dopart>>
  #);

adjustLength:
  (# thrd: ^thread;
     unwind: ## stackUnwinder;
     count,oldrange: @integer
  enter (thrd[],unwind##,count)
  <<SLOT RepetitionEntityAdjustLength:dopart>>
  #)

-- RepetitionEntityPrivate:descriptor --
(# 
   names: [3] @l1MapElement;            (* For range/extend/new *)
   
   theRange: @l1Entity
     (# 
        init::(# do INNER #);
        typename::(# do '"range" of repetition'->value[] #);
        shortTypename::(# do 'RANGE'->value[] #);
        print::(# <<SLOT RepetitionEntityRangePrint:dopart>> #);
        printShort::(# <<SLOT RepetitionEntityRangePrintShort:dopart>> #);
        execute::(# (* no action *) #);
        getEnterIter::
          (# <<SLOT RepetitionEntityRangeGetEnterIter:dopart>> #);
        getExitIter::
          (# <<SLOT RepetitionEntityRangeGetExitIter:dopart>> #);
        getEnterExitIter::
          (# <<SLOT RepetitionEntityRangeGetEnterExitIter:dopart>> #)
     #);
   
   theExtend: @l1Entity
     (# 
        init::(# do INNER #);
        typename::(# do '"extend" of repetition'->value[] #);
        shortTypename::(# do 'EXTEND'->value[] #);
        print::(# (* no action *) #);
        printShort::(# (* no action *) #);
        execute::(# (* no action *) #);
        getEnterIter::
          (# <<SLOT RepetitionEntityExtendGetEnterIter:dopart>> #);
        getExitIter::
          (# <<SLOT RepetitionEntityExtendGetExitIter:dopart>> #);
        getEnterExitIter::
          (# <<SLOT RepetitionEntityExtendGetEnterExitIter:dopart>> #)
     #);
   
   theNew: @l1Entity
     (# 
        init::(# do INNER #);
        typename::(# do '"new" of repetition'->value[] #);
        shortTypename::(# do 'NEW'->value[] #);
        print::(# (* no action *) #);
        printShort::(# (* no action *) #);
        execute::(# (* no action *) #);
        getEnterIter::
          (# <<SLOT RepetitionEntityNewGetEnterIter:dopart>> #);
        getExitIter::
          (# <<SLOT RepetitionEntityNewGetExitIter:dopart>> #);
        getEnterExitIter::
          (# <<SLOT RepetitionEntityNewGetEnterExitIter:dopart>> #)
     #);

   init: (# <<SLOT RepetitionEntityPrivateInit:dopart>> #)
#)

(* 
 * local variables:
 * ee-beta-main-file: "~/gbeta-0.9/src/main/gbeta.bet"
 * end:
 *)
