(* FILE "./private/interplibbody.bet"
 *
 * Copyright (C) 1997-2001 Erik Ernst
 *
 * This file is part of "gbeta" -- a generalized version of the
 * programming language BETA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is destributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * Among other things, the copyright notice and this notice must be
 * preserved on all copies.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program, probably in a file named COPYING; if not,
 * write to the Free Software Foundation, Inc., 675 Mass Ave,
 * Cambridge, MA 02139, USA.
 *
 * To contact the author by email: eernst@cs.auc.dk
 *
 * To contact the author by snail-mail:
 *    Erik Ernst
 *    Department of Computer Science
 *    University of Aalborg
 *    DK-9220 Aalborg OE
 *    Denmark
 *
 * $Id: interplibbody.bet,v 1.32 2001/07/01 21:44:11 eernst Exp $
 *)

ORIGIN 'interplib';
INCLUDE '~beta/containers/arrayContainer';
INCLUDE '~beta/containers/private/arrayContainerBody';
INCLUDE 'ibetaStaticlib';
INCLUDE 'interpbody'

-- LookupAndPrint:dopart --
do
   (theSyntax[],placement[],'AttributeDenotation')
     ->parseAndSomething
   (# parseFailure::(# do parseError #);
      cleanupCallbackAndStack: @
        (# done: @boolean
        do (if not done then
               true->done;
               (* cut down stack to previous level *)
               L: (if thrd.stackSize>saveStackHeight then
                      thrd.stackPop; restart L
                  if);
               (* reset thread switching counter and restore interaction *)
               saveStepCount->this(interpreterBase).private.stepCount;
               saveCallback[]->thrd.callback[];
               (* reset the virtual machine, if in use *)
               (if doByteCode then
                   thrd.private.bvm.resetFrame
               if)
           if)
        #);
      graphNode: ^
        this(interpreterBase).private.betaAstHandler.fragmentGraph.node;
      l2aden: ^l2AttributeDenotation;
      dContext: ^substanceSlice;
      l1ent: ^l1Entity;
      saveCallback: ^executionCallback; 
      saveStepCount: @integer;
      saveStackHeight: @integer
   do
      fg[]
        ->this(interpreterBase).private.fragmentGraph.findGroup
        ->graphNode[];
      
      (this(interpreterBase).private.fragmentGraph[],graphNode[]
      ,ff.root[],this(interpreter)[],this(interpreterBase).private.nameGen[])
        ->this(interpreterBase).private.betaAstHandler.theGGrammar.aslevel2
        ->l2aden[];
      
      (* finish the basic l2ast structure *)
      (placement.father[],placement.scope[],l2aden[])
        ->setupFatherEtc;

      (* give us a break to do this, and do not interact on the fly .. *)
      this(interpreterBase).private.stepCount->saveStepCount;
      MAXINT->this(interpreterBase).private.stepCount;
      thrd.callback[]->saveCallback[];
      thrd.stackSize->saveStackHeight;

      (* static analysis errors should not stop 
       * the top-level interpretation *)
      NONE->thrd.callback[];
      (l2aden[],thrd[])->analysisAndContextErrorScope
      (# noContext::(# do true->continue #);
         cleanup::(# do cleanupCallbackAndStack #)
      do (if dContext[]<>NONE then
             L: unwindscope
               (# onLeave::(# do leavingWarning; leave L #);
                  onRestart::(# do leavingWarning; leave L #);
                  onKill::(# do killWarning; leave L #);
                  onError::(# do errorWarning; leave L #)
               do (* search the run-time context for the requested entity *)
                  (thrd[],unwind##,dContext[])
                    ->l2aden.lookup
                    ->l1ent[];
                  
                  (* print it *)
                  (screen[],10,true,NONE)->l1ent.print;
                  newline
               #)
          else
             noContextWarning
         if)
      #);
      cleanupCallbackAndStack
   #)

-- LookupAndPrintStatic:dopart --
do
   (theSyntax[],placement[],'AttributeDenotation')
     ->parseAndSomething
   (# parseFailure::(# do parseError #);
      graphNode: ^
        this(interpreterBase).private.betaAstHandler.fragmentGraph.node;
      l2aden: ^l2AttributeDenotation;
      dContext: ^substanceSlice
   do
      fg[]
        ->this(interpreterBase).private.fragmentGraph.findGroup
        ->graphNode[];
      
      (this(interpreterBase).private.fragmentGraph[],graphNode[]
      ,ff.root[],this(interpreter)[],this(interpreterBase).private.nameGen[])
        ->this(interpreterBase).private.betaAstHandler.theGGrammar.aslevel2
        ->l2aden[];
      
      (* finish the basic l2ast structure *)
      (placement.father[],placement.scope[],l2aden[])
        ->setupFatherEtc;
      
      l2aden[]->analysisErrorScope
      (# 
      do (* print the l2aden static info *)
         (NONE,'Static info',0)->l2aden.observeSemAtt
      #)
   #)

-- LookupAndPrintStaticEval:dopart --
do
   (theSyntax[],placement[],'Evaluation')
     ->parseAndSomething
   (# parseFailure::(# do parseError #);
      graphNode: ^
        this(interpreterBase).private.betaAstHandler.fragmentGraph.node;
      l2eval: ^l2Evaluation;
      dContext: ^substanceSlice
   do
      fg[]
        ->this(interpreterBase).private.fragmentGraph.findGroup
        ->graphNode[];
      
      (this(interpreterBase).private.fragmentGraph[],graphNode[]
      ,ff.root[],this(interpreter)[],this(interpreterBase).private.nameGen[])
        ->this(interpreterBase).private.betaAstHandler.theGGrammar.aslevel2
        ->l2eval[];
      
      (* finish the basic l2ast structure *)
      (placement.father[],placement.scope[],l2eval[])
        ->setupFatherEtc;
      
      l2eval[]->analysisErrorScope
      (# 
      do (* print the l2eval static output info *)
         '\nEvaluation type: '->puttext;
         (screen[],17,false)
           ->(l2eval.localStaticTransientOut).printShort;
         '\n\n  Detailed info: '->puttext;
         (screen[],17,false)
           ->(l2eval.localStaticTransientOut).print
      #)
   #)

-- LookupAndPrintStaticAssign:dopart --
do
   (theSyntax[],placement[],'Transaction')
     ->parseAndSomething
   (# parseFailure::(# do parseError #);
      graphNode: ^
        this(interpreterBase).private.betaAstHandler.fragmentGraph.node;
      l2tract: ^l2Transaction;
      dContext: ^substanceSlice
   do
      fg[]
        ->this(interpreterBase).private.fragmentGraph.findGroup
        ->graphNode[];
      
      (this(interpreterBase).private.fragmentGraph[],graphNode[]
      ,ff.root[],this(interpreter)[],this(interpreterBase).private.nameGen[])
        ->this(interpreterBase).private.betaAstHandler.theGGrammar.aslevel2
        ->l2tract[];
      
      (* finish the basic l2ast structure *)
      (placement.father[],placement.scope[],l2tract[])
        ->setupFatherEtc;
      
      l2tract[]->analysisErrorScope
      (# 
      do (* print the l2tract static input info *)
         '\nAssignment type: '->puttext;
         (screen[],17,false)
           ->(l2tract.localStaticTransientIn).printShort;
         '\n\n  Detailed info: '->puttext;
         (screen[],17,false)
           ->(l2tract.localStaticTransientIn).print
      #)
   #)

(* 
 * local variables:
 * ee-beta-main-file: "~/gbeta-0.9/src/main/gbeta.bet"
 * end:
 *)
