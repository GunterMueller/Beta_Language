(* FILE "./private/ibetaTwoPrimbody.bet"
 *
 * Copyright (C) 1999-2001 Erik Ernst
 *
 * This file is part of "gbeta" -- a generalized version of the
 * programming language BETA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is destributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * Among other things, the copyright notice and this notice must be
 * preserved on all copies.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program, probably in a file named COPYING; if not,
 * write to the Free Software Foundation, Inc., 675 Mass Ave,
 * Cambridge, MA 02139, USA.
 *
 * To contact the author by email: eernst@cs.auc.dk
 *
 * To contact the author by snail-mail:
 *    Erik Ernst
 *    Department of Computer Science
 *    University of Aalborg
 *    DK-9220 Aalborg OE
 *    Denmark
 *
 * $Id: ibetaTwoPrimbody.bet,v 1.8 2001/07/01 21:44:11 eernst Exp $
 *)

ORIGIN 'ibetaTwobody'

-- PrimitivePrint:dopart --
do
   'TOS\'...\''->output

-- PrimitiveGetTranOut:dopart --
do
   createSingletonTransient(# type::staticIntegerTransient #)->stran[]
   
-- PrimitiveGetTranIn:dopart --
do
   createSingletonTransient(# type::staticIntegerTransient #)->stran[]
   
-- PrimitiveGetCplr:dopart --
do
   &exeCompiler[]->ec[];
   usageAst[]->ec.usageAst[]
   
-- PrimitiveGetEnterCplr:dopart --
do
   &enterOnceCompiler
   (# generate::
        (# (* dummy semantics: just throw away the argument *)
        do (&staticIntegerTransient[]).init->stran[];
           ('ibetaTwoPrimbody.bet/55',stran[])
             ->(&discardCode[]).init
             ->program.append
        #)
   #)[]->nc[]
   
-- PrimitiveGetExitCplr:dopart --
do
   &exitOnceCompiler
   (# generate::
        (# (* dummy semantics: just push zero *)
        do ('ibetaTwoPrimbody.bet/66',0)
             ->(&literalIntegerCode[]).init
             ->program.append;
           (&staticIntegerTransient[]).init->stran[]
        #)
   #)[]->xc[]
   
-- PrimitiveGetEnterExitCplr:dopart --
do
   (context[],world[],usageAst[],false)->getEnterCompiler->nc[];
   (context[],world[],usageAst[])->getExitCompiler->xc[];

-- PrimitiveClosureExecute:dopart --
do
   (* nothing *)
   
-- PrimitiveGetEnterIter:dopart --
do
   &enterOnce[]->ni[]
   
-- PrimitiveGetExitIter:dopart --
do
   &exitOnce
   (# l0tri: ^l0TransientInteger
   do &l0TransientInteger[]->l0tri[]->l0tr[];
      this(l2Primitive)[]->l0tr.usageAst[];
      (* dummy semantics: all primitives return zero *)
      0->l0tri
   #)[]->xi[]

-- AddressPrint:dopart --
do
   '@@...'->output

-- AddressGetTranOut:dopart --
do
   createSingletonTransient(# type::staticIntegerTransient #)->stran[]
   
-- AddressLib:attributes --

assignFail:
  (# do ('Attempt to assign to an \'@@\' (address) expression'
     ,'An address can only be evaluated'
     ,this(l2Address)[])->staticError
  #)
   
-- AddressGetTranIn:dopart --
do
   assignFail
   
-- AddressGetCplr:dopart --
do
   (* nothing *)
   
-- AddressGetEnterCplr:dopart --
do
   assignFail
   
-- AddressGetExitCplr:dopart --
do
   &exitOnceCompiler
   (# generate::
        (# (* dummy semantics: all addresses are NULL *)
        do ('ibetaTwoPrimbody.bet/128',0)
             ->(&literalIntegerCode[]).init
             ->program.append;
           (&staticIntegerTransient[]).init->stran[]
        #)
   #)[]->xc[]

-- AddressGetEnterExitCplr:dopart --
do
   assignFail
   
-- AddressClosureExecute:dopart --
do
   (* nothing *)
   
-- AddressGetEnterIter:dopart --
do
   assignFail
   
-- AddressGetExitIter:dopart --
do
   &exitOnce
   (# l0tri: ^l0TransientInteger
   do &l0TransientInteger[]->l0tri[]->l0tr[];
      this(l2Address)[]->l0tr.usageAst[];
      (* dummy semantics: all addresses are NULL *)
      0->l0tri
   #)[]->xi[]
   
(* 
 * local variables:
 * ee-beta-main-file: "~/gbeta-0.9/src/main/gbeta.bet"
 * end:
 *)
