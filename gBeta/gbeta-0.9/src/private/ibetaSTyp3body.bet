(* FILE "./private/ibetaSTyp3body.bet"
 *
 * Copyright (C) 1997-2001 Erik Ernst
 *
 * This file is part of "gbeta" -- a generalized version of the
 * programming language BETA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is destributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * Among other things, the copyright notice and this notice must be
 * preserved on all copies.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program, probably in a file named COPYING; if not,
 * write to the Free Software Foundation, Inc., 675 Mass Ave,
 * Cambridge, MA 02139, USA.
 *
 * To contact the author by email: eernst@cs.auc.dk
 *
 * To contact the author by snail-mail:
 *    Erik Ernst
 *    Department of Computer Science
 *    University of Aalborg
 *    DK-9220 Aalborg OE
 *    Denmark
 *
 * $Id: ibetaSTyp3body.bet,v 1.67 2001/07/01 21:44:11 eernst Exp $
 *)

ORIGIN '../ibetaSType';
INCLUDE 'ibetaCommonlib';
INCLUDE 'ibetaTwolib';
INCLUDE 'ibetaOnelib';
INCLUDE 'ibetaStaticlib';
INCLUDE 'ibetaSlicelib'

(*************************************************************
 *                                                           *
 *                     Static Transients                     * 
 *                                                           *
 *************************************************************)

-- StaticSublistTransientCopyLink:dopart --
do
   strlist.deliverCopy->theCopy.strlist.assign

-- StaticSublistTransientPrint:dopart --
do
   (if strlist.empty then 
       ' (empty)'->output
    else
       (dest[],indentation+indent_delta,false,true)->strlist.print
   if)

-- StaticSublistTransientPrintShort:dopart --
do
   (if strlist.empty then 
       '('->output
   else
       (dest[],indentation,false,false)->strlist.printShort
       (# nonFrst: @boolean;
          beforeEach::
            (# 
            do (if nonFrst then ','->output else '('->output; true->nonFrst if)
            #)
       #)
   if);
   ')'->output

-- StaticSublistTransientEqual:dopart --
do
   (if other##<=staticSublistTransient## then 
       (# otherSStran: ^staticSublistTransient
       do other[]->otherSStran[];
          otherSStran.strlist[]
            ->strlist.equal
            ->value
       #)
    else
       false->value
   if)

-- StaticSublistTransientCompatible:dopart --
do
   (if other##<=staticSublistTransient## then 
       (# otherSStran: ^staticSublistTransient
       do other[]->otherSStran[];
          (otherSStran.strlist[],usageAst[])
            ->strlist.compatible
            ->value
       #)
    else
       false->value
   if)

-- StaticSublistTransientNormalize:dopart --
do
   (* delegate, to handle subtrees recursively *)
   strlist.normalize;
   
   (* by default, this sublist itself is the result *)
   this(staticSublistTransient)[]->normalized[];
   
   (* the reducible configuration is a succession of 
    * two or more static sublist transients such that 
    * each non-last contains a list of length exactly 
    * one containing the successor sublist; compact 
    * such configurations *)
   L: (if strlist.size=1 then 
          (* singleton sublist, compaction could be appropriate *)
          (# stran: ^staticTransient;
             sstran: ^staticSublistTransient
          do strlist.first->stran[];
             (if stran##<=staticSublistTransient## then 
                 (* compaction! *)
                 stran[]->sstran[];
                 (* since sstran is now garbage collected, we may 
                  * steal its contents: deliver, not deliverCopy *)
                 sstran.strlist.deliver->strlist.assign;
                 restart L
              else
                 (* singleton, containing non-sublist; deliver contents *)
                 stran[]->normalized[]
             if)
          #)
       (* else: *)
          (* several elements in sublist, not a compaction case *)
      if)

-- StaticBasicTransientEqual:dopart --
do
   ( other##<=selfType## )->value

-- StaticBasicTransientNormalize:dopart --
do
   this(staticBasicTransient)[]->normalized[]

-- StaticBooleanTransientCompatible:dopart --
do
   (if true 
    // other##<=staticSublistTransient## then
       (* structure is different, fail *)
       false->value
       
    // other##<=staticBooleanTransient## then
       true->value
       
    // other##<=staticCharTransient## then
       (* compiler says "incompatible" *)
       false->value
       
    // other##<=staticIntegerTransient## then
       (* compiler says "warning" *)
       usageAst[]->intToBoolWarning;
       true->value
       
    // other##<=staticRealTransient## then 
       (* compiler says "incompatible" *)
       false->value
       
    // other##<=staticStringTransient## then 
       false->value
       
    // other##<=staticNoneTransient## 
    // other##<=staticORefTransient## 
    // other##<=staticPRefTransient## 
    // other##<=staticRepeatedTransient## then 
       false->value
       
    else
       'Unexpected kind of static transient'
         ->internalError
   if)

-- StaticCharTransientCompatible:dopart --
do
   (if true 
    // other##<=staticSublistTransient## then
       (* structure is different, fail *)
       false->value
       
    // other##<=staticBooleanTransient## then
       (* compiler says "incompatible" *)
       false->value
       
    // other##<=staticCharTransient## then
       true->value
       
    // other##<=staticIntegerTransient## then
       (* !! register value coercion for code generation *)
       true->value 
       
    // other##<=staticRealTransient## then
       (* compiler says "incompatible" *)
       false->value
       
    // other##<=staticStringTransient## then 
       (* we can coerce a string to a char iff the string is singleton *)
       (# sstran: ^staticStringTransient
       do other[]->sstran[];
          sstran.singleton->value
          (* !! if yes: register value coercion for code generation *)
       #)
       
    // other##<=staticNoneTransient## 
    // other##<=staticORefTransient## 
    // other##<=staticPRefTransient## 
    // other##<=staticRepeatedTransient## then
       false->value
       
    else
       'Unexpected kind of static transient'
         ->internalError
   if)

-- StaticIntegerTransientCompatible:dopart --
do
   (if true 
    // other##<=staticSublistTransient## then
       (* structure is different, fail *)
       false->value
       
    // other##<=staticBooleanTransient## then
       (* compiler says "warning" !! table in 'ibetaSlicelib' says "no"! *)
       (* usageAst[]->boolToIntWarning; true->value; changed to: *)
       false->value
       
    // other##<=staticCharTransient## then
       (* !! register value coercion for code generation *)
       true->value
       
    // other##<=staticIntegerTransient## then
       true->value
       
    // other##<=staticRealTransient## then
       (* !! register value coercion for code generation *)
       true->value
       
    // other##<=staticStringTransient## then 
       (# sstran: ^staticStringTransient
       do other[]->sstran[];
          sstran.singleton->value
          (* !! if yes: register value coercion for code generation *)
       #)
       
    // other##<=staticNoneTransient## 
    // other##<=staticORefTransient## 
    // other##<=staticPRefTransient## 
    // other##<=staticRepeatedTransient## then
       false->value
       
    else
       'Unexpected kind of static transient'
         ->internalError
   if)

-- StaticStringTransientCompatible:dopart --
do
   (if true 
    // other##<=staticSublistTransient## then
       (* structure is different, fail *)
       false->value
       
    // other##<=staticBooleanTransient## then
       (* same as in boolean above: No *)
       false->value
       
    // other##<=staticCharTransient## then
       (* coercion char-->string must be supported *)
       true->value
       
    // other##<=staticIntegerTransient## then
       (* table says "no" *)
       false->value
       
    // other##<=staticRealTransient## then
       (* table says "no" *)
       false->value
       
    // other##<=staticStringTransient## then 
       true->value
       
    // other##<=staticNoneTransient##
    // other##<=staticORefTransient##
    // other##<=staticPRefTransient## then
       false->value
       
    // other##<=staticRepeatedTransient## then
       (* compatible iff 'other' is a repetition of char *)
       (# strtran: ^staticRepeatedTransient
       do other[]->strtran[];
          ( strtran.entrySTran##<=staticCharTransient## )->value
          (* !!! register coercion for code generation etc. *)
       #)
       
    else
       'Unexpected kind of static transient'
         ->internalError
   if)

-- StaticRealTransientCompatible:dopart --
do
   (if true 
    // other##<=staticSublistTransient## then
       (* structure is different, fail *)
       false->value
       
    // other##<=staticBooleanTransient## then
       (* compiler says "incompatible" *)
       false->value
       
    // other##<=staticCharTransient## then
       (* compiler says "incompatible" *)
       false->value
       
    // other##<=staticIntegerTransient## then
       (* !! register value coercion for code generation *)
       true->value
       
    // other##<=staticRealTransient## then
       true->value
       
    // other##<=staticStringTransient## then 
       (* expanded table in 'ibetaSlicelib' says "no" *)
       false->value
       
    // other##<=staticNoneTransient##
    // other##<=staticORefTransient##
    // other##<=staticPRefTransient##
    // other##<=staticRepeatedTransient## then
       false->value
       
    else
       'Unexpected kind of static transient'
         ->internalError
   if)

-- StaticNoneTransientEqual:dopart --
do
   ( other##<=staticNoneTransient## )->value

-- StaticNoneTransientCompatible:dopart --
do
   (* should never turn up on the receiving side of an assignment *)
   'Checking assignability to NONE'
     ->internalError

-- StaticNoneTransientNormalize:dopart --
do
   this(staticNoneTransient)[]->normalized[]

-- StaticORefTransientPrint:dopart -- 
do
   ', typed as'->output;
   (dest[],indentation+indent_delta,true)->sptype.print

-- StaticORefTransientPrintShort:dopart -- 
do
   '[]'->output

-- StaticORefTransientEqual:dopart --
do
   (if other##<=staticORefTransient## then 
       (# otherSOtran: ^staticORefTransient
       do other[]->otherSOtran[];
          otherSOtran.sptype[]->sptype.equal->value
       #)
    else
       false->value
   if)

-- StaticORefTransientCompatible:dopart --
do
   (* An object reference should never appear as a transient 
    * consumer, that role is played by a staticOQuaTransient *)
   'A staticORefTransient was used as a transient consumer'
     ->internalError

-- StaticORefTransientNormalize:dopart --
do
   this(StaticORefTransient)[]->normalized[]

-- StaticPRefTransientPrint:dopart -- 
do
   ', typed as'->output;
   (dest[],indentation+indent_delta,true)->sptype.print

-- StaticPRefTransientPrintShort:dopart -- 
do
   '##'->output

-- StaticPRefTransientEqual:dopart --
do
   (if other##<=staticPRefTransient## then 
       (# otherSPtran: ^staticPRefTransient
       do other[]->otherSPtran[];
          (* !!! otherSPtran.stype[]->stype.equal->value; *)
          'ibetaSTyp3body.bet/406: '->notyet; (* !!! *)
       #)
    else
       false->value
   if)

-- StaticPRefTransientCompatible:dopart --
do
   (* An pattern transient should never appear as a transient 
    * consumer, that role is played by a staticPQuaTransient *)
   'A staticPRefTransient was used as a transient consumer'
     ->internalError

-- StaticPRefTransientNormalize:dopart --
do
   this(staticPRefTransient)[]->normalized[]

-- StaticOQuaTransientCopy:dopart --
do 
   pathTo.copyRtp->theCopy.pathTo[];
   sptype.copy->theCopy.sptype[];
   exact->theCopy.exact
   
-- StaticOQuaTransientPrint:dopart -- 
do
   (if exact then ', exact'->output else ', upper bound'->output if);
   ', typed as'->output;
   (dest[],indentation+indent_delta,true)->sptype.print

-- StaticOQuaTransientPrintShort:dopart -- 
do
   (* !!! same as staticORefTransient; how to distinguish? *)
   '[]'->output

-- StaticOQuaTransientEqual:dopart --
do
   (if other##<=staticOQuaTransient## then
       (# otherOQtran: ^staticOQuaTransient
       do other[]->otherOQtran[];
          (otherOQtran.sptype[]->sptype.equal) and (otherOQtran.exact=exact)
            ->value
       #)
    else
       false->value
   if)

-- StaticOQuaTransientCompatible:dopart --
do
   (if true 
    // other##<=staticSublistTransient## then
       (* structure is different, fail *)
       false->value

    // other##<=staticStringTransient## then
       (* WARNING: this is the highly atypical (compared with the 
        * rest of the language) string-to-textref conversion in BETA;
        * it is only present here for backward compatibility and may go
        * away if we can somehow avoid it or normalize/generalize it! *)
       sptype[]->private.isTheTextType->value

    // other##<=staticBasicTransient## then
       (* none of these (non-strings) are compatible *)
       false->value

    // other##<=staticNoneTransient## then
       (* NONE -> ref[] always OK *)
       true->value

    // other##<=staticORefTransient## then
       (* check type compatibility *)
       other[]->orefCompatible
       (# emitQW:
            (# msg: ^text; otherORTran: ^staticORefTransient
            enter msg[]
            do other[]->otherORTran[];
               (usageAst[],msg[],otherORTran.sptype[]
               ,this(staticOQuaTransient)[])->quaWarning
            #);
          onBoundUnsafe::(# do 'only upper bound known'->emitQW #);
          onDownUnsafe::(# do 'down-casting'->emitQW #);
          onUpUnsafe::(# do 'up-casting'->emitQW #);
          onCrossUnsafe::(# do 'cross-typing'->emitQW #)
       #);
       (* !!! as long as we accept qua-warnings it
        * is always OK to do oref->oqua; later we will want 
        * assign the returned result from orefCompatible to value,
        * such that qua-warnings are converted to errors *)
       true->value

    // other##<=staticPRefTransient## then
       (* the set of object refs and structure refs are disjoint *)
       false->value

    // other##<=staticOQuaTransient## 
    // other##<=staticPQuaTransient## then
       (* qualifications are not supposed deliver transients *)
       'Received a qualification from a transient producer'
         ->internalError

    // other##<=staticRepeatedTransient## then
       false->value

    else
       'Unexpected kind of static transient'
         ->internalError
   if)

-- StaticOQuaTransientNormalize:dopart --
do
   this(StaticOQuaTransient)[]->normalized[]

-- StaticPQuaTransientCopy:dopart --
do
   pathTo.copyRtp->theCopy.pathTo[];
   sptype.copy->theCopy.sptype[]

-- StaticPQuaTransientPrint:dopart -- 
do
   ', typed as'->output;
   (dest[],indentation+indent_delta,true)->sptype.print

-- StaticPQuaTransientPrintShort:dopart -- 
do
   (* !!! same as StaticPRefTransientPrintShort; how to distinguish? *)
   '##'->output

-- StaticPQuaTransientEqual:dopart --
do
   (if other##<=staticPQuaTransient## then 
       (# otherSPtran: ^staticPQuaTransient
       do other[]->otherSPtran[];
          (* !!! otherSPtran.stype[]->stype.equal->value; *)
          'ibetaSTyp3body.bet/406: '->notyet; (* !!! *)
       #)
    else
       false->value
   if)

-- StaticPQuaTransientCompatible:dopart --
do
   (if true
    // other##<=staticSublistTransient## then
       (* structure is different, fail *)
       false->value

    // other##<=staticBasicTransient## then
       (* none of these are compatible *)
       false->value

    // other##<=staticNoneTransient## then
       (* NONE -> ref[] always OK *)
       true->value

    // other##<=staticORefTransient## then
       (* the set of object refs and structure refs are disjoint *)
       false->value

    // other##<=staticPRefTransient## then
       (* check type compatibility; this is significantly simpler
        * than the ORef case since we do not have exactness *)
       other[]->prefCompatible
       (# emitQW:
            (# msg: ^text; otherPRTran: ^staticPRefTransient
            enter msg[]
            do other[]->otherPRTran[];
               (usageAst[],msg[],otherPRTran.sptype[]
               ,this(staticPQuaTransient)[])->quaWarning
            #);
          onBoundUnsafe::(# do 'only upper bound known'->emitQW #);
          onDownUnsafe::(# do 'down-casting'->emitQW #);
          onCrossUnsafe::(# do 'cross-typing'->emitQW #)
       #);
       (* !!! as long as we accept qua-warnings it
        * is always OK to do pref->pqua; later we will want
        * assign the returned result from prefCompatible to value,
        * such that qua-warnings are converted to errors *)
       true->value

    // other##<=staticOQuaTransient##
    // other##<=staticPQuaTransient## then
       (* qualifications are not supposed deliver transients *)
       'Received a qualification from a transient producer'
         ->internalError

    // other##<=staticRepeatedTransient## then
       false->value

    else
       'Unexpected kind of static transient'
         ->internalError
   if)

-- StaticPQuaTransientNormalize:dopart --
do
   this(staticPQuaTransient)[]->normalized[]

-- StaticRepeatedTransientCopy:dopart --
do
   entrySTran.copy->theCopy.entrySTran[]

-- StaticRepeatedTransientPrint:dopart -- 
do
   ', declared by "'->output;
   (dest[],indentation,false)->l2rdecl.print;
   '", containing '->output;
   (if byReference then '(by reference)'->output if);
   (dest[],indentation+indent_delta,true)->entrySTran.print;
   (if boundsPathTo[]<>NONE then
       '\nand with bounds '->output;
       (if lo[]<>NONE then
           (dest[],indentation+indent_delta,false)->lo.print
        else
           '[lower bound is NONE!]'->output
       if);
       (if hi[]<>NONE then
           (dest[],indentation+indent_delta,false)->hi.print
        else
           '[upper bound is NONE!]'->output
       if)
   if)

-- StaticRepeatedTransientPrintShort:dopart -- 
do
   '['->output;
   (dest[],indentation,false)->entrySTran.printShort;
   ']'->output

-- StaticRepeatedTransientEqual:dopart --
do
   (if other##<=staticRepeatedTransient## then 
       (# otherSRtran: ^staticRepeatedTransient
       do other[]->otherSRtran[];
          otherSRtran.entryStran[]
            ->entryStran.equal
            ->value
       #)
    else
       false->value
   if)

-- StaticRepeatedTransientCompatible:dopart --
do
   (if true 
    // other##<=staticRepeatedTransient## then 
       (# otherSRtran: ^staticRepeatedTransient
       do other[]->otherSRtran[];
          (otherSRtran.entrySTran[],usageAst[])
            ->entrySTran.compatible
            ->value
       #);
    // other##<=staticStringTransient## then 
       ( entrySTran##<=staticCharTransient## )->value
    else
       false->value
   if)

-- StaticRepeatedTransientNormalize:dopart --
do
   entrySTran.normalize->entrySTran[];
   this(staticRepeatedTransient)[]->normalized[]

(************************************************************
 *                                                          *
 *                      Run-time paths                      *
 *                                                          *
 ************************************************************)

-- RuntimeOutStepCopy:dopart --
do 
   AstNode[]->theCopy.AstNode[];
   count->theCopy.count;
   lcount->theCopy.lcount

-- RuntimeOutStepPrint:dopart --
do
   '<-'->output;
   count->outputInteger;
   (if lcount<>0 then 
       '+'->output;
       lcount->outputInteger
   if);
   (if private.showNumberSelector['w'+1] then
       (if AstNode.mpsAst[]<>NONE then
           '`'->output;
           AstNode.mpsPosition->output
        else
           '`'->output;
           (if AstNode[]=predefinedSyntax[] then 
               '_'->output
            else
               '!'->output
           if)
       if)
   if)

-- RuntimeOutStepEqual:dopart --
do
   (if other##<=runtimeOutStep## then 
       (# otherOut: ^runtimeOutStep
       do other[]->otherOut[];
          (count=otherOut.count) and (lcount=otherOut.lcount)->value
       #)
    else
       false->value
   if)

-- RuntimeOutStepRobustEqual:dopart --
do
   other[]->equal->value

-- RuntimeOutStepPerformStatic:dopart --
do
   L: (# stcon: ^staticContext
      do (for i:(count+lcount) repeat 
              (world[],usageAst[])
                ->from.getEnclosing
                ->to[];
              (if to[]<>NONE then 
                  to[]->from[]
               else
                  (* failed *)
                  leave L
              if)
         for);
         (* succeeded, but see if destination has the right syntax *)
         (if to##<=staticContext## then 
             to[]->stcon[];
             (if AstNode[]<>stcon.getSyntax then 
                 'Stray static walk: unexpected syntax when going out'
                   ->internalError
             if)
          else
             (* Going out should _always_ bring us to a context *)
             'A runtime out step led to a non-context'
               ->internalError
         if)
      #)

-- RuntimeOutStepPerformDynamic:dopart --
do
   from[]->to[];
   L: (for i:(count+lcount) repeat
           (* INVARIANT: "to" is the place we have reached sofar *)
           (if to[]=NONE then leave L if);
           to[]->from[];
           from.getEnclosing->to[]
      for);

-- RuntimeOutStepPerformDynamicRef:dopart --
do
   (* static analysis should make it impossible to 
    * generate code that executes this step! *)
   'Attempt to obtain a reference attribute via an OUT-step'
     ->internalError

-- RuntimeOutStepPerformDynamicL1:dopart --
do
   from[]->osli[];
   L: (for i:(count+lcount) repeat
           (* INVARIANT: "osli" is the place we have reached sofar *)
           (if osli[]=NONE then leave L if);
           osli[]->from[];
           from.getEnclosing->osli[]
      for);
   osli.identity->to[]

-- RuntimeUpStepPrint:dopart --
do
   '^'->output;
   (if l2ast##<=l2MainPart## then 
       (# l2mpar: ^l2MainPart
       do l2ast[]->l2mpar[];
          (dest[],indentation,false)->l2mpar.printShort
       #)
    else
       (dest[],indentation,false)->l2ast.print
   if)

-- RuntimeUpStepEqual:dopart --
do
   (if other##<=runtimeUpStep## then 
       (# otherUp: ^runtimeUpStep
       do other[]->otherUp[];
          (l2ast[]=otherUp.l2ast[])->value
       #)
    else
       false->value
   if)

-- RuntimeUpStepRobustEqual:dopart --
do
   other[]->equal->value

-- RuntimeUpStepPerformStatic:dopart --
do
   (if l2ast[]->from.focusUp then 
       from[]->to[]
    else
       (* failed *)
       NONE->to[]
   if)

-- RuntimeUpStepPerformDynamic:dopart --
do
   from[]->to[];
   (* INVARIANT: "to" is the place we have reached sofar *)
   L: (if (to[]<>NONE) and (to.getSyntax<>l2ast[]) then 
          to[]->from[];
          from.getPrefix->to[];
          restart L
      if)

-- RuntimeUpStepPerformDynamicRef:dopart --
do
   (* static analysis should make it impossible to 
    * generate code that executes this step! *)
   'Attempt to obtain a reference attribute via an UP-step'
     ->internalError

-- RuntimeUpStepPerformDynamicL1:dopart --
do
   from[]->osli[];
   (* INVARIANT: "osli" is the place we have reached sofar *)
   L: (if (osli[]<>NONE) and (osli.getSyntax<>l2ast[]) then
          osli[]->from[];
          from.getPrefix->osli[];
          restart L
      if);
   osli.identity->to[]

-- RuntimeDownStepPrint:dopart --
do
   'v'->output;
   (if l2ast##<=l2MainPart## then 
       (# l2mpar: ^l2MainPart
       do l2ast[]->l2mpar[];
          (dest[],indentation,false)->l2mpar.printShort
       #)
    else
       (dest[],indentation,false)->l2ast.print
   if)

-- RuntimeDownStepEqual:dopart --
do
   (if other##<=runtimeDownStep## then 
       (# otherDown: ^runtimeDownStep
       do other[]->otherDown[];
          (l2ast[]=otherDown.l2ast[])->value
       #)
    else
       false->value
   if)

-- RuntimeDownStepRobustEqual:dopart --
do
   other[]->equal->value

-- RuntimeDownStepPerformStatic:dopart --
do
   (if l2ast[]->from.focusDown then
       from[]->to[]
    else
       (* failed *)
       NONE->to[]
   if)

-- RuntimeDownStepPerformDynamic:dopart --
do
   from[]->to[];
   (* INVARIANT: "to" is the place we have reached sofar *)
   L: (if (to[]<>NONE) and (to.getSyntax<>l2ast[]) then
          to[]->from[];
          from.getSuffix->to[];
          restart L
      if)

-- RuntimeDownStepPerformDynamicRef:dopart --
do
   (* static analysis should make it impossible to 
    * generate code that executes this step! *)
   'Attempt to obtain a reference attribute via a DOWN-step'
     ->internalError

-- RuntimeDownStepPerformDynamicL1:dopart --
do
   from[]->osli[];
   (* INVARIANT: "ssli" is the place we have reached sofar *)
   L: (if (osli[]<>NONE) and (osli.getSyntax<>l2ast[]) then
          osli[]->from[];
          from.getSuffix->osli[];
          restart L
      if);
   osli.identity->to[]

-- RuntimeLookupStepCopy:dopart --
do
   l2ndcl[]->theCopy.l2ndcl[];
   repeated->theCopy.repeated

-- RuntimeLookupStepPrint:dopart --
do
   (if repeated then '['->output if);
   '"'->output;
   (dest[],indentation,false)->l2ndcl.print;
   '"'->output;
   (if repeated then ']'->output if)

-- RuntimeLookupStepPrintCode:dopart --
do
   (if repeated then '['->output if);
   '"'->output;
   (dest[],indentation,false)->l2ndcl.printCode;
   '"'->output;
   (if repeated then ']'->output if)

-- RuntimeLookupStepEqual:dopart --
do
   (if other##<=runtimeLookupStep## then
       (# otherLookup: ^runtimeLookupStep;
       do other[]->otherLookup[];
          (l2ndcl[]=otherLookup.l2ndcl[]) and (repeated=otherLookup.repeated)
            ->value;
          (* It might seem that we can just test for the same 
           * name and then validate that their values of
           * 'repeated' are the same, since every pair of 
           * runtime paths that could ever be compared 
           * in a correct analysis would be valid relative 
           * to the same main part -- hence the same name should 
           * always be a lookup of the same declaration and 
           * hence yielding the same repeated properties; 
           * this was tried out and led to problems!
           * 
           * The reason is that 'leadsToSame' compares from _behind_
           * so the same text string may look up entirely different 
           * declarations; the above strategy would work if each
           * lookup step would contain a reference to the actual
           * 'l2NameDcl' instead of the text string: then the 
           * name equality test would always fail for lookups 
           * into distinct declarations; anyway here is the 
           * problematic version:
           *   
           *   (if value then
           *       (if repeated<>otherLookup.repeated then
           *           'Inconsistent knowledge about decl. (repeated)'
           *             ->internalError;
           *       if);
           *   if);
           *)
       #)
    else
       false->value
   if)

-- RuntimeLookupStepRobustEqual:dopart --
do
   (if other##<=runtimeLookupStep## then 
       (# otherLookup: ^runtimeLookupStep
       do other[]->otherLookup[];
          (l2ndcl[]=otherLookup.l2ndcl[]) 
          and (repeated=otherLookup.repeated)
            ->value
       #)
    else
       false->value
   if)

-- RuntimeLookupStepPerformStatic:dopart --
do
   (l2ndcl.value[],world[],usageAst[])
     ->from.getByLookup
     ->to[];
   (if (to[]<>NONE) and ( to##<=staticContext## ) then 
       (* reset focus *)
       (# stcon: ^staticContext
       do to[]->stcon[];
          stcon.resetFocus
       #)
   if)
   (* !! consider use of repeated to model 
    * the run-time semantics more closely *)

-- RuntimeLookupStepPerformDynamic:dopart --
do
   (* Obtain the entity bound to the given name decl; it is an object *)
   (thrd[],unwind##,l2ndcl[])->from.lookupName->l1obj[];
   l1obj.private.slices.first->to[]
   
-- RuntimeLookupStepPerformDynamicRef:dopart --
do
   (* static analysis should make it impossible to 
    * generate code that executes this step! *)
   'Attempt to obtain a reference attribute via a direct LOOKUP-step'
     ->internalError

-- RuntimeLookupStepPerformDynamicL1:dopart --
do
   (* Obtain the entity bound to the given name decl; it is an object *)
   (thrd[],unwind##,l2ndcl[])->from.lookupName->to[]

-- RuntimeLookupIndirectStepInit:dopart --
do
   (if l2ndcl[]<>NONE then
       (l2ndcl.decl.localStaticType).kind->kind
    (*else*)
       (* only 'copyLink' is expected to invoke init without arguments;
        * we will set up 'kind' inside 'copyLink' to handle this *)
   if)

-- RuntimeLookupIndirectStepCopy:dopart --
do
   l2ndcl[]->theCopy.l2ndcl[];
   repeated->theCopy.repeated;
   (* NB: 'kind' is normally initialized by 'init', but since 'copyLink'
    * invokes 'init' without arguments we have to set it here as well *)
   kind->theCopy.kind

-- RuntimeLookupIndirectStepPrint:dopart --
do
   (if repeated then '['->output if);
   '\''->output;
   (dest[],indentation,false)->l2ndcl.print;
   '\''->output;
   (if repeated then ']'->output if)

-- RuntimeLookupIndirectStepPrintCode:dopart --
do
   (if repeated then '['->output if);
   '\''->output;
   (dest[],indentation,false)->l2ndcl.printCode;
   '\''->output;
   (if repeated then ']'->output if)

-- RuntimeLookupIndirectStepEqual:dopart --
do
   (if other##<=runtimeLookupIndirectStep## then 
       (# otherLookup: ^runtimeLookupIndirectStep;
       do other[]->otherLookup[];
          (l2ndcl[]=otherLookup.l2ndcl[])
          and (repeated=otherLookup.repeated)
            ->value;
          (* It might seem that we can just test for the same 
           * name and then validate that the values of
           * 'repeated' are the same, since every pair of 
           * runtime paths that could ever be compared 
           * in a correct analysis would be valid relative 
           * to the same main part -- hence the same name should 
           * always be a lookup of the same declaration and 
           * hence yielding the same repeated properties; 
           * this was tried out and led to problems!
           * 
           * The reason is that 'leadsToSame' compares from _behind_
           * so the same text string may look up entirely different 
           * declarations; the above strategy would work if each
           * lookup step would contain a reference to the actual
           * 'l2NameDcl' instead of the text string: then the 
           * name equality test would always fail for lookups 
           * into distinct declarations; anyway here is the 
           * problematic version:
           *   
           *   (if value then
           *       (if repeated<>otherLookup.repeated then
           *           'Inconsistent knowledge about decl. (repeated)'
           *             ->internalError;
           *       if);
           *   if);
           *)
       #)
    else
       false->value
   if)

-- RuntimeLookupIndirectStepRobustEqual:dopart --
do
   (if other##<=runtimeLookupIndirectStep## then 
       (# otherLookup: ^runtimeLookupIndirectStep
       do other[]->otherLookup[];
          (l2ndcl[]=otherLookup.l2ndcl[]) 
          and (repeated=otherLookup.repeated)
            ->value
       #)
    else
       false->value
   if)

-- RuntimeLookupIndirectStepPerformStatic:dopart --
do
   (l2ndcl.value[],world[],usageAst[])
     ->from.getByLookup
     ->to[];
   (if (to[]<>NONE) and ( to##<=staticContext## ) then 
       (* reset focus *)
       (# stcon: ^staticContext
       do to[]->stcon[];
          stcon.resetFocus
       #)
   if)
   (* !! consider use of repeated to model 
    * the run-time semantics more closely *)

-- RuntimeLookupIndirectStepPerformDynamic:dopart --
do
   (* Obtain the entity bound to the given name decl; it is an oref *)
   (thrd[],unwind##,l2ndcl[])->from.lookupName->l1oref[];
   (if l1oref.value[]<>NONE then
       l1oref.value.private.slices.first->to[]
    else
       ('Attribute looked up for remote access is NONE'
       ,thrd[],unwind##)->refNoneError
   if)

-- RuntimeLookupIndirectStepPerformDynamicRef:dopart --
do
   (* Obtain the entity bound to the given name decl; it is an oref/pref *)
   (thrd[],unwind##,l2ndcl[])->from.lookupName->to[]

-- RuntimeLookupIndirectStepPerformDynamicL1:dopart --
do
   (* !!! We should definitely split this step into variants, one 
    * for object refs and another for pattern refs, etc *)

   (* Obtain the entity bound to the given name decl *)
   (thrd[],unwind##,l2ndcl[])->from.lookupName->l1ent[];
   (if kind 
    // objectRefTypeKind then l1ent[]->l1oref[]; l1oref.value[]->to[]
    // patternRefTypeKind then l1ent[]->l1pref[]; l1pref.value[]->to[]
    // repetitionTypeKind then l1ent[]->to[]
   if)

-- RuntimeSelectStepCopy:dopart --
do 
   Evaluation[]->theCopy.Evaluation[];
   evalWhere.copyRtp->theCopy.evalWhere[]

-- RuntimeSelectStepPrint:dopart --
do
   '['->output;
   (dest[],indentation,false)->Evaluation.print;
   ']@'->output;
   (dest[],indentation,false)->evalWhere.print

-- RuntimeSelectStepEqual:dopart --
do
   (if other##<=runtimeSelectStep## then 
       (# otherSelect: ^runtimeSelectStep
       do other[]->otherSelect[];
          (Evaluation[]=otherSelect.Evaluation[]) and 
          (evalWhere[]->otherSelect.evalWhere.equal)
            ->value
       #)
    else
       false->value
   if)

-- RuntimeSelectStepRobustEqual:dopart --
do
   other[]->equal->value

-- RuntimeSelectStepPerformStatic:dopart --
do
   (# strep: ^staticRepetition
   do (if from##<=staticRepetition## then 
          from[]->strep[];
          strep.stocp[]->to[];
          (if (to[]<>NONE) and ( to##<=staticContext## ) then 
              (* reset focus *)
              (# stcon: ^staticContext
              do to[]->stcon[];
                 stcon.resetFocus
              #)
          if)
       else
          'Trying to select from a non-repetition'
            ->internalError
      if)
   #)

-- RuntimeSelectStepPerformDynamic:dopart --
do
   'ibetaSTyp3body.bet/1159: '->notyet; (* !!! *)

-- RuntimeSelectStepPerformDynamicRef:dopart --
do
   'ibetaSTyp3body.bet/1163: '->notyet; (* !!! *)

-- RuntimeSelectStepPerformDynamicL1:dopart --
do
   'ibetaSTyp3body.bet/1167: '->notyet; (* !!! *)

-- RuntimTmpStepCopy:dopart --
do
   stype[]->theCopy.stype[];
   l2ast[]->theCopy.l2ast[];
   inx->theCopy.inx

-- RuntimeTmpStepPrint:dopart --
do
   'tmp('->output;
   (if inx=unknownStackPos then 
       '?`'->output;
       l2ast.mpsPosition->output
    else 
       inx->outputInteger 
   if);
   (* ':'->output;
   (dest[],indentation,false)->stype.printShort; *)
   ')'->output

-- RuntimeTmpStepEqual:dopart --
do
   (if other##<=runtimeTmpStep## then 
       (# otherTmp: ^runtimeTmpStep
       do other[]->otherTmp[];
          (l2ast[]=otherTmp.l2ast[]) and (inx=otherTmp.inx)->value;
          (* COMMENTABLE: 
           * (if value then
           *     (if not (stype[]->otherTmp.stype.equal)->value then 
           *         'inconsistent analysis of tmp.paths'
           *           ->internalError
           *     if)
           * if)
           *)
       #)
    else
       false->value
   if)

-- RuntimeTmpStepRobustEqual:dopart --
do
   other[]->equal->value

-- RuntimeTmpStepPerformStatic:dopart --
do
   (* !! Consider: do we sometimes know the (here: NONE) entryAst? *)
   (# path: ^runtimePath;
      entryAst: ^l2AstNode
   do (NONE,NONE,from.getInitialSyntax)
        ->(&runtimePath[]).init
        ->path[];
      this(runtimeTmpStep).copy->path.append;
      (from[],path[],NONE,usageAst[])
        ->stype.staticInstantiate
        ->to[]
   #)

-- RuntimeTmpStepPerformDynamic:dopart --
do
   (# l1obj: ^l1ObjectEntity
   do (* inx=unknownStackPos would be a bug, so we let it generate the
       * "repetition index out of range" runtime-error if it happens *)
      inx->thrd.getTmpObj->l1obj[];
      (if l1obj.private.slices.empty then 
          (* NB: this means that we cannot "walk into 
           * object", since there is no slice to go to! *)
          NONE->to[]
       else
          l1obj.private.slices.first->to[]
      if)
   #)

-- RuntimeTmpStepPerformDynamicRef:dopart --
do
   (* static analysis should make it impossible to 
    * generate code that executes this step! *)
   'Attempt to obtain a reference attribute via a TMP-step'
     ->internalError

-- RuntimeTmpStepPerformDynamicL1:dopart --
do
   (* inx=unknownStackPos would be a bug, so we let it generate the
    * "repetition index out of range" runtime-error if it happens *)
   inx->thrd.getTmpObj->to[]

-- RuntimeImpossibleStepPrint:dopart --
do
   '!'->output

-- RuntimeImpossibleStepEqual:dopart --
do
   (* _No_ path is equal to an impossible one, not even 
    * another impossible path; this is because we do 
    * not want to think that two unreachable substances 
    * are the same *)
   false->value

-- RuntimeImpossibleStepRobustEqual:dopart --
do
   false->value

-- RuntimeImpossibleStepPerformStatic:dopart --
do
   (* tell caller that we could not do it *)
   NONE->to[]

-- RuntimeImpossibleStepPerformDynamic:dopart --
do
   (* this should have been caught in static analysis! *)
   'Trying to enter unreachable substance slice'
     ->internalError

-- RuntimeImpossibleStepPerformDynamicRef:dopart --
do
   (* this should have been caught in static analysis! *)
   'Trying to enter unreachable reference'
     ->internalError

-- RuntimeImpossibleStepPerformDynamicL1:dopart --
do
   (* this should have been caught in static analysis! *)
   'Trying to access unreachable l1Entity'
     ->internalError

(* 
 * local variables:
 * ee-beta-main-file: "~/gbeta-0.9/src/main/gbeta.bet"
 * end:
 *)
