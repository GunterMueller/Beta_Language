(* FILE "./private/basicinterplib1body.bet"
 *
 * Copyright (C) 1997-2001 Erik Ernst
 *
 * This file is part of "gbeta" -- a generalized version of the
 * programming language BETA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is destributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * Among other things, the copyright notice and this notice must be
 * preserved on all copies.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program, probably in a file named COPYING; if not,
 * write to the Free Software Foundation, Inc., 675 Mass Ave,
 * Cambridge, MA 02139, USA.
 *
 * To contact the author by email: eernst@cs.auc.dk
 *
 * To contact the author by snail-mail:
 *    Erik Ernst
 *    Department of Computer Science
 *    University of Aalborg
 *    DK-9220 Aalborg OE
 *    Denmark
 *
 * $Id: basicinterplib1body.bet,v 1.11 2001/07/01 21:44:10 eernst Exp $
 *)

ORIGIN 'basicinterplib';
INCLUDE '~beta/basiclib/file';
INCLUDE '~beta/basiclib/random';
INCLUDE '~beta/containers/sets';
INCLUDE '~beta/containers/arrayContainer';
INCLUDE '../gbeta2abeta/gbeta2abeta';
INCLUDE '../beta2abeta/beta2abeta';
INCLUDE '../beta2abeta/astutil';
INCLUDE '../beta2abeta/fragmentGraph';
INCLUDE '../ibetaIter';
INCLUDE 'ibetaStaticlib';
INCLUDE 'ibetaSlicelib';
INCLUDE 'ibetaOnelib';
INCLUDE 'interplib'

(************************************************************
 *                                                          *
 *                        Misc Utils                        *
 *                                                          *
 ************************************************************)

-- VerboseOutput:dopart --
do
   private.verboseOutput->value

-- SetVerboseOutput:dopart --
do
   value->private.verboseOutput
   
-- PrintByteCodeOrigin:dopart --
do
   private.printByteCodeOrigin->value
   
-- SetPrintByteCodeOrigin:dopart --
do
   value->private.printByteCodeOrigin

-- SetMeasureRunningTime:dopart --
do
   value->private.measureRunningTime

-- NoSubstanceError:dopart --
do
   (# msg: ^text
   do 'Attempt to use '->msg[];
      t[]->msg.puttext;
      ' as substance (e.g. remote access)'->msg.puttext;
      (msg[],'Use an object',l2napl[])->staticError
   #)

-- ObserveBase:dopart --
do
   (if (category=0) or (private.observeSelector[category+1]) then 
       (# t: ^text
       do (* observation by default goes to stdout, but can be 
           * redirected any time, and several times, if you want *)
          (if private.observeStream[]=NONE then 
              screen[]->private.observeStream[]
          if);
          
          (* produce a somewhat homogeneous printout format *)
          '\n'->t[];
          (for i:private.observeIndentation repeat ' '->t.put for);
          (if (headline[]<>NONE) and (headline.length>0) then 
              headline[]->t.puttext;
              ': '->t.puttext
          if);
          L: (if (t.length mod 10)<>1 then ' '->t.append; restart L if);
          t[]->private.observeStream.puttext;
          (t.length-1)->indentation;
          
          (* INNER would contain something like: 
           *   (private.observeStream[],indentation,false)->print; 
           * to conform to the normal "observe" format *)
          INNER ObserveBase
       #)
   if)

-- ObserveString:dopart --
do
   (if (category=0) or (private.observeSelector[category+1]) then 
       (# 
       do (* observation by default goes to stdout, but can be 
           * redirected any time, and several times, if you want *)
          (if private.observeStream[]=NONE then
              screen[]->private.observeStream[]
          if);
          (private.observeStream[],private.observeIndentation,false)
            ->printBase(# do msg[]->output #)
       #)
   if)

-- ObserveIndent:dopart --
do
   (if (category=0) or (private.observeSelector[category+1]) then 
       private.observeIndentation+private.observeIndentDelta
         ->private.observeIndentation
   if)

-- ObserveOutdent:dopart --
do
   (if (category=0) or (private.observeSelector[category+1]) then 
       (private.observeIndentation-private.observeIndentDelta,0)
         ->max
         ->private.observeIndentation
   if)

-- TraceBase:dopart --
do
   (if (category=0) or (private.traceSelector[category+1]) then 
       (# t: ^text
       do (* observation by default goes to stdout, but can be 
           * redirected any time, and several times, if you want *)
          (if private.traceStream[]=NONE then 
              screen[]->private.traceStream[]
          if);
          
          (* produce a somewhat homogeneous printout format *)
          '\n'->t[];
          (for i:private.traceIndentation repeat ' '->t.put for);
          (if (headline[]<>NONE) and (headline.length>0) then 
              headline[]->t.puttext;
              ': '->t.puttext
          if);
          L: (if (t.length mod 10)<>1 then ' '->t.append; restart L if);
          t[]->private.traceStream.puttext;
          (t.length-1)->indentation;
          
          (* INNER would contain something like: 
           *   (private.traceStream[],indentation,false)->print; 
           * to conform to the normal "trace" format *)
          INNER TraceBase
       #)
   if)

-- TraceString:dopart --
do
   (if (category=0) or (private.traceSelector[category+1]) then 
       (# 
       do (* observation by default goes to stdout, but can be 
           * redirected any time, and several times, if you want *)
          (if private.traceStream[]=NONE then
              screen[]->private.traceStream[]
          if);
          (private.traceStream[],private.traceIndentation,false)
            ->printBase(# do msg[]->output #)
       #)
   if)

-- TraceIndent:dopart --
do
   (if (category=0) or (private.traceSelector[category+1]) then 
       private.traceIndentation+private.traceIndentDelta
         ->private.traceIndentation
   if)

-- TraceOutdent:dopart --
do
   (if (category=0) or (private.traceSelector[category+1]) then 
       (private.traceIndentation-private.traceIndentDelta,0)
         ->max
         ->private.traceIndentation
   if)

-- NewStackableObject:dopart --
do 
   &stackableObject[]->oofo[]->thrd.private.bvm.saveFrame;
   l1obj[]->oofo.l1obj[]

-- NewStackableFor:dopart --
do
   &stackableFor[]->ooff[]->thrd.private.bvm.saveFrame;
   fsSlice[]->ooff.fsSlice[]

-- NewStackableLabel:dopart --
do
   &stackableLabel[]->oofl[]->thrd.private.bvm.saveFrame;
   lsSlice[]->oofl.lsSlice[]

-- NewStackableWhen:dopart --
do
   &stackableWhen[]->oofw[]->thrd.private.bvm.saveFrame;
   wsSlice[]->oofw.wsSlice[]

-- NewStackableWhenAlt:dopart --
do
   &stackableWhenAlt[]->oofwa[]->thrd.private.bvm.saveFrame;
   waSlice[]->oofwa.waSlice[]

-- InterpreterBaseTypekindName:dopart --
do
   (if kind
    // labelTypeKind then 'label'->name[]
    // repetitionTypeKind then 'repetition'->name[]
    // commandTypeKind then 'primitive command'->name[]
    // boolSourceTypeKind then 'boolean source'->name[]
    // intSourceTypeKind then 'integer source'->name[]
    // intSinkTypeKind then 'integer sink'->name[]
    // boolSinkSourceTypeKind then 'boolean sink/source'->name[]
    // charSinkSourceTypeKind then 'char sink/source'->name[]
    // intSinkSourceTypeKind then 'integer sink/source'->name[]
    // realSinkSourceTypeKind then 'real sink/source'->name[]
    // stringSinkSourceTypeKind then 'string sink/source'->name[]
    // intSinkCharSourceTypeKind then 'int/char sink/source'->name[]
    // patternTypeKind then 'pattern'->name[]
    // patternRefTypeKind then 'pattern reference'->name[]
    // objectTypeKind then 'object'->name[]
    // objectRefTypeKind then 'object reference'->name[]
    else 
       (* forgiving response even though this is a bug .. we are 
        * probably creating an error message anyway *)
       'unrecognized type kind'->name[]
   if)

-- InterpreterBaseThreadCount:dopart --
do
   private.threadCount->value

-- InterpreterBaseThreadCountUp:dopart --
do
   private.threadCount+1->private.threadCount

-- InterpreterBaseThreadCountDown:dopart --
do
   private.threadCount-1->private.threadCount;
   (if (private.threadCountSem.count>0) and (private.threadCount<=0) then 
       private.threadCountSem.v
   if)

-- InterpreterBaseThreadCountWaitForZero:dopart --
do
   private.threadCountSem.p

-- StringNameEqual:dopart --
do 
   (((name1[],name2[])->theStrCmp)=0)
     ->value

-- NameEqual:dopart --
do (name[],l2ndcl.value[])
     ->theStringNameEqual
     ->value

-- RepetitionNameLookup:dopart --
do
   name[]
     ->predefinedSyntax.predefinedNames.private.repNameLookup
     ->l2ndcl[]

-- SetupFatherEtc:dopart --
do
   (* set up some back pointers in the syntax tree *)
   (enclosingSyntax[],enclosingScope[],l2ast[])
     ->setupFatherLinks;
   
   (* Set up 'initialSyntax' of l2NameApl.rtp and l2ThisObject.rtp;
    * this could not be done as usual (in 'init') because the 
    * above ast nodes have been initialized before 'scope' refs have
    * been initialized *)
   (# l2napl: ^l2NameApl;
      l2this: ^l2ThisObject;
      l2ssimp: ^l2ScopeSpecImp;
      l2mpar: ^l2MainPart;
      names: @arrayContainer
        (# theStrCmp: @strcmp;
           element::l2NameDcl;
           less::
             (# do (((left.value[],right.value[])->theStrCmp)=-1)->value #);
           capacityInitial::
             (# (* !! at most 1000 names in one mainpart supported *)
             do 1000->value 
             #)
        #);
      size,i: @integer;
   do names.init;
      l2ast.rawScanPre
      (# 
      do (if true
          // current##<=l2NAmeApl## then
             current[]->l2napl[];
             l2napl.scope.location->l2napl.rtp.initialSyntax[]
          // current##<=l2ThisObject## then
             current[]->l2this[];
             l2this.scope.location->l2this.rtp.initialSyntax[]
          // current##<=l2ScopeSpecImp## then
             current[]->l2ssimp[];
             l2ssimp.scope.location->l2ssimp.rtp.initialSyntax[]
          // current##<=l2MainPart## then
             current[]->l2mpar[];
             (* set up 'offset' of name decls: first gather, unsorted .. *)
             l2mpar.Attributes.scan
             (# end::(# do offset->l2mpar.private.dclcount #);
                offset: @integer
             do current.Names.scan
                (# do (current[],offset+1->offset)->names.put #)
             #);
             (* .. then sort the names and check for duplicates *)
             names.size->size->names.quicksort;
             size->l2mpar.private.dcls.new;
             (for i:size repeat
                  i->names.get->l2mpar.private.dcls[i][];
                  i->l2mpar.private.dcls[i].offset;
                  (if i>1 then 
                      (if (l2mpar.private.dcls[i-1].value[]
                          ,l2mpar.private.dcls[i][])
                            ->this(interpreterBase).private.theNameEqual then
                          (* multiply declared name! *)
                          (i-1->names.get,i->names.get)->handleDoubleDecl
                      if)
                  if)
             for);
             names.clear
         if)
      #)
   #)

-- ErrorScope:dopart --
do
   (# saveStaticHandler: ##staticErrorHandlerType;
      saveDynamicFormatter: ##dynamicErrorFormatterType
   do staticErrorHandler##->saveStaticHandler##;
      dynamicErrorFormatter##->saveDynamicFormatter##;
      L: (# staticUnwinder: staticErrorHandlerType
              (# do (msg[],solution[])->onStaticError; leave L #);
            dynamicInformant: dynamicErrorFormatterType
              (# do msg[]->onDynamicError #)
         do
            staticUnwinder##->staticErrorHandler##;
            dynamicInformant##->dynamicErrorFormatter##;
            INNER ErrorScope
         #);
      saveStaticHandler##->staticErrorHandler##;
      saveDynamicFormatter##->dynamicErrorFormatter##
   #)

-- AnalysisErrorScope:dopart --
do 
   (* do static analysis *)
   l2ast[]->setupSemLinksAndSTypes;
   
   (* now use the static information we have obtained *)
   INNER
   
-- AnalysisAndContextErrorScope:dopart --
do
   (* we did not leave, so the analysis succeeded *)
   (* find the current dynamic context *)
   (if thrd.stackEmpty then 
       (* fall back to the primary slice when stack is empty *)
       (if l2ast.scope.location
           =this(interpreterBase).private.primaryDescriptor[] then
           this(interpreterBase).private.primaryObject.private.slices.first
             ->dContext[]
        else
           noContext
       if)
    else
       l2ast.scope.location
         ->thrd.findSlice
         ->dContext[]
   if);
   
   (* ready to do something with 'dContext' *)
   INNER

-- ParseAndSomething:dopart --
do 
   (# fail: (# msg: ^text enter msg[] do msg[]->putline; parseFailure #);
      nontermSymbol: @integer;
      ok,fatal: @boolean;
      errorText: @text
   do
      (* prepare parsing: set up the fragment form and compute nontermSymbol *)
      placement.mpsAst.frag.father
        ->fg[];
      this(interpreterBase).private.betaAstHandler.theGGrammar[]
        ->this(interpreterBase).private.betaAstHandler.newFragmentform
        ->ff[]
        ->fg.fragmentList.insertFragment;
      nontermName[]
        ->this(interpreterBase).private.betaAstHandler 
        .theGGrammar.parser.findSymbolNo
        ->nontermSymbol;
      theSyntax.reset;
      theSyntax.scanWhiteSpace;
      
      (* parse the given syntax *)
      (nontermSymbol,theSyntax[],screen[],ff[])
        ->this(interpreterBase).private.betaAstHandler
        .theGGrammar.parser.doParse
      (# astOverflow::(# do 'ast overflow'->fail #);
         fragmentNotExisting::(# do 'fragment does not exist'->fail #);
         grammarNotFound::(# do 'grammar not found'->fail #);
         badFormat::(# do 'bad format'->fail #);
         parseErrors::(# do 'parse errors'->fail #);
         fatalParseError::
           (# (* this is hopefully the only probable error *)
           do 'Parse errors: '->errorText.putText; msg[]->errorText.putLine;
              true->fatal->continue;
           #);
         doubleFormDeclaration::(# do 'double form declaration'->fail #);
         readAccessError::(# do 'read access error'->fail #);
         writeAccessError::(# do 'write access error'->fail #);
         writeAccessOnLstFileError::
           (# do 'no write access on lst file'->fail #);
         EOSError::(# do 'EOS error'->fail #);
         noSuchFileError::(# do 'no such file'->fail #);
         fileExistsError::(# do 'file exists'->fail #);
         noSpaceLeftError::(# do 'no space left on disk'->fail #);
         otherFileError::(# do 'some file error occurred'->fail #)
      #)->ok;
      
      (if not ok then 
          (if not fatal then
              theSyntax.Reset;
              (theSyntax[],errorText[]) -> ff.grammar.parser.errorReport
          if);
          theSyntax[] -> screen.putLine
      if);
      
      (if fatal or (ff.root[]=NONE) then 
          'Parsing failed'->fail
       else
          (* (10,screen[])->ff.root.dump; *)
          INNER parseAndSomething
      if)
      (* !!! we should probably take out the fragment form again *)
   #)

-- ParseAndInterpret:dopart --
do
   (theSyntax[],placement[],'Imp')
     ->parseAndSomething
   (# parseFailure::(# do parseError #);
      cleanupCallbackAndStack: @
        (# done: @boolean
        do (if not done then
               true->done;
               (* cut down stack to previous level *)
               L: (if thrd.stackSize>saveStackHeight then
                      thrd.stackPop; restart L
                  if);
               (* reset thread switching counter and restore interaction *)
               saveStepCount->this(interpreterBase).private.stepCount;
               saveCallback[]->thrd.callback[];
               (* reset the virtual machine, if in use *)
               (if doByteCode then
                   thrd.private.bvm.resetFrame
               if)
           if)
        #);
      graphNode: ^
        this(interpreterBase).private.betaAstHandler.fragmentGraph.node;
      l2imperative: ^l2Imp;
      dContext: ^substanceSlice;
      saveCallback: ^executionCallback; 
      saveStepCount: @integer;
      saveStackHeight: @integer
   do
      fg[]
        ->this(interpreterBase).private.fragmentGraph.findGroup
        ->graphNode[];
      
      (this(interpreterBase).private.fragmentGraph[],graphNode[]
      ,ff.root[],this(interpreterBase)[]
      ,this(interpreterBase).private.nameGen[])
        ->this(interpreterBase).private.betaAstHandler.theGGrammar.aslevel2
        ->l2imperative[];
      
      (* finish the basic l2ast structure *)
      (placement.father[],placement.scope[],l2imperative[])
        ->setupFatherEtc;
      
      (* give us a break to do this, and do not interact on the fly .. *)
      this(interpreterBase).private.stepCount->saveStepCount;
      MAXINT->this(interpreterBase).private.stepCount;
      thrd.callback[]->saveCallback[];
      thrd.stackSize->saveStackHeight;
      
      (* static analysis errors should not stop 
       * the top-level interpretation *)
      NONE->thrd.callback[];
      (l2imperative[],thrd[])->analysisAndContextErrorScope
      (# noContext::(# do true->continue #);
         cleanup::(# do cleanupCallbackAndStack #)
      do (if dContext[]<>NONE then
             L: unwindscope
               (# onLeave::(# do leavingWarning; leave L #);
                  onRestart::(# do leavingWarning; leave L #);
                  onKill::(# do killWarning; leave L #);
                  onError::(# do errorWarning; leave L #)
               do (* execute the constructed imperative *)
                  (thrd[],unwind##,dContext[])
                    ->l2imperative.execute
               #)
          else
             noContextWarning
         if)
      #);
      cleanupCallbackAndStack
   #)

(************************************************************
 *                                                          *
 *                   BETA Virtual Machine                   *
 *                                                          *
 ************************************************************)

-- BetaByteCodeObserve:dopart --
do
   (this(interpreterBase).private.observeStream[],indentation,false)
     ->print

-- BetaByteCodeListObserve:dopart --
do
   (this(interpreterBase).private.observeStream[],indentation,false,true)
     ->print

-- BetaByteCodeListAddCmt:dopart --
do
   scan
   (#
   do (if current.comment[]=NONE then
          t.copy->current.comment[]
       else
          '; '->current.comment.puttext;
          t[]->current.comment.puttext
      if)
   #)

-- BetaByteCodeListAddNC:dopart --
do
   scan(# do (if current.comment[]=NONE then t.copy->current.comment[] if)#)

-- BetaByteCodeListExecute:dopart --
do
   scan
   (# do
      (*test-obs*) ('Executing','Y')->current.observe;
      (thrd[],unwind##,dContext[])->current.execute;
      (*test-obs*) ('      BVM','Y')->thrd.private.bvm.observe;
   #)

(************************************************************
 *                                                          *
 *                        Predefined                        *
 *                                                          *
 ************************************************************)

-- BooleanFindNameDcl:dopart --
do
   (if (name[],boolValueDcl[])->this(interpreterBase).private.theNameEqual then 
       boolValueDcl[]->l2ndcl[]
    else
       (* no other names here *)
       NONE->l2ndcl[]
   if)

-- CharFindNameDcl:dopart --
do
   (if (name[],charValueDcl[])->this(interpreterBase).private.theNameEqual then 
       charValueDcl[]->l2ndcl[]
    else
       (* no other names here *)
       NONE->l2ndcl[]
   if)

-- IntegerFindNameDcl:dopart --
do
   (if (name[],intValueDcl[])->this(interpreterBase).private.theNameEqual then 
       intValueDcl[]->l2ndcl[]
    else
       (* no other names here *)
       NONE->l2ndcl[]
   if)

-- RealFindNameDcl:dopart --
do
   (if (name[],realValueDcl[])->this(interpreterBase).private.theNameEqual then 
       realValueDcl[]->l2ndcl[]
    else
       (* no other names here *)
       NONE->l2ndcl[]
   if)

-- StringFindNameDcl:dopart --
do
   (if true
    // (name[],stringValueDcl[])
         ->this(interpreterBase).private.theNameEqual then
       stringValueDcl[]->l2ndcl[]
    // (name[],lengthDcl[])->this(interpreterBase).private.theNameEqual then 
       lengthDcl[]->l2ndcl[]
    // (name[],atDcl[])->this(interpreterBase).private.theNameEqual then 
       atDcl[]->l2ndcl[]
    else
       (* no other names here *)
       NONE->l2ndcl[]
   if)

-- ComponentFindNameDcl:dopart --
do
   (if true
    // (name[],forkDcl[])->this(interpreterBase).private.theNameEqual then 
       forkDcl[]->l2ndcl[]
    // (name[],killDcl[])->this(interpreterBase).private.theNameEqual then 
       killDcl[]->l2ndcl[]
    // (name[],suspendDcl[])->this(interpreterBase).private.theNameEqual then 
       suspendDcl[]->l2ndcl[]
    // (name[],statusDcl[])->this(interpreterBase).private.theNameEqual then 
       statusDcl[]->l2ndcl[]
    else
       (* no other names here *)
       NONE->l2ndcl[]
   if)

-- SemaphoreFindNameDcl:dopart --
do
   (if true
    // (name[],semVDcl[])->this(interpreterBase).private.theNameEqual then 
       semVDcl[]->l2ndcl[]
    // (name[],semPDcl[])->this(interpreterBase).private.theNameEqual then 
       semPDcl[]->l2ndcl[]
    // (name[],semTryPDcl[])->this(interpreterBase).private.theNameEqual then 
       semTryPDcl[]->l2ndcl[]
    // (name[],semCountDcl[])->this(interpreterBase).private.theNameEqual then 
       semCountDcl[]->l2ndcl[]
    else
       (* no other names here *)
       NONE->l2ndcl[]
   if)

-- BoolValueSTypeInst:dopart --
do
   L: (# fail: 
           (# problem: ^text;
              msg: ^text
           enter problem[]
           do 'Attempt to look up \'value\' in '->msg[]; 
              (context.typename).withIndefArticle->msg.puttext;
              problem[]->msg.puttext;
              (msg[],
              'Use a \'boolean\' object (ref), or an instance of a subpattern'
              ,usageAst[])->staticError
           #);
         stocp: ^staticOCP;
         bsSlice: ^booleanStaticSlice
      do (if context##<=staticOCP## then
             context[]->stocp[];
             stocp.sptype.slices.scanReverse
             (# (* scan reverse because the boolean slice is probably last *)
             do (if current##<=booleanStaticSlice## then
                    current[]->bsSlice[];
                    stocp.getInitialSyntax
                      ->(&bsSlice.theValue[]).init
                      ->stsub[];
                    path.deliverCopy->stsub.pathTo.assign;
                    leave L
                if)
             #);
             (* not found *)
             ' with no \'boolean\' slice'->fail
          else
             (* not even an object! *)
             ''->fail
         if)
      #)

-- CharValueSTypeInst:dopart --
do
   L: (# fail: 
           (# problem: ^text;
              msg: ^text
           enter problem[]
           do 'Attempt to look up \'value\' in '->msg[]; 
              (context.typename).withIndefArticle->msg.puttext;
              problem[]->msg.puttext;
              (msg[],
              'Use a \'char\' object (ref), or an instance of a subpattern'
              ,usageAst[])->staticError
           #);
         stocp: ^staticOCP;
         csSlice: ^charStaticSlice
      do (if context##<=staticOCP## then
             context[]->stocp[];
             stocp.sptype.slices.scanReverse
             (# (* scan reverse because the char slice is probably last *)
             do (if current##<=charStaticSlice## then
                    current[]->csSlice[];
                    stocp.getInitialSyntax
                      ->(&csSlice.theValue[]).init
                      ->stsub[];
                    path.deliverCopy->stsub.pathTo.assign;
                    leave L
                if)
             #);
             (* not found *)
             ' with no \'char\' slice'->fail
          else
             (* not even an object! *)
             ''->fail
         if)
      #)

-- IntValueSTypeInst:dopart --
do
   L: (# fail: 
           (# problem: ^text;
              msg: ^text
           enter problem[]
           do 'Attempt to look up \'value\' in '->msg[]; 
              (context.typename).withIndefArticle->msg.puttext;
              problem[]->msg.puttext;
              (msg[],
              'Use a \'integer\' object (ref), or an instance of a subpattern'
              ,usageAst[])->staticError
           #);
         stocp: ^staticOCP;
         isSlice: ^integerStaticSlice
      do (if context##<=staticOCP## then
             context[]->stocp[];
             stocp.sptype.slices.scanReverse
             (# (* scan reverse because the integer slice is probably last *)
             do (if current##<=integerStaticSlice## then
                    current[]->isSlice[];
                    stocp.getInitialSyntax
                      ->(&isSlice.theValue[]).init
                      ->stsub[];
                    path.deliverCopy->stsub.pathTo.assign;
                    leave L
                if)
             #);
             (* not found *)
             ' with no \'integer\' slice'->fail
          else
             (* not even an object! *)
             ''->fail
         if)
      #)

-- RealValueSTypeInst:dopart --
do
   L: (# fail: 
           (# problem: ^text;
              msg: ^text
           enter problem[]
           do 'Attempt to look up \'value\' in '->msg[]; 
              (context.typename).withIndefArticle->msg.puttext;
              problem[]->msg.puttext;
              (msg[],
              'Use a \'real\' object (ref), or an instance of a subpattern'
              ,usageAst[])->staticError
           #);
         stocp: ^staticOCP;
         rsSlice: ^realStaticSlice
      do (if context##<=staticOCP## then
             context[]->stocp[];
             stocp.sptype.slices.scanReverse
             (# (* scan reverse because the real slice is probably last *)
             do (if current##<=realStaticSlice## then
                    current[]->rsSlice[];
                    stocp.getInitialSyntax
                      ->(&rsSlice.theValue[]).init
                      ->stsub[];
                    path.deliverCopy->stsub.pathTo.assign;
                    leave L
                if)
             #);
             (* not found *)
             ' with no \'real\' slice'->fail
          else
             (* not even an object! *)
             ''->fail
         if)
      #)

(* 
 * local variables:
 * ee-beta-main-file: "~/gbeta-0.9/src/main/gbeta.bet"
 * end:
 *)
