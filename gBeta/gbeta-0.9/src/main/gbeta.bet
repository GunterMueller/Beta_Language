(* FILE "./main/gbeta.bet"
 *
 * Copyright (C) 1997-2001 Erik Ernst
 *
 * This file is part of "gbeta" -- a generalized version of the
 * programming language BETA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is destributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * Among other things, the copyright notice and this notice must be
 * preserved on all copies.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program, probably in a file named COPYING; if not,
 * write to the Free Software Foundation, Inc., 675 Mass Ave,
 * Cambridge, MA 02139, USA.
 *
 * To contact the author by email: eernst@cs.auc.dk
 *
 * To contact the author by snail-mail:
 *    Erik Ernst
 *    Department of Computer Science
 *    University of Aalborg
 *    DK-9220 Aalborg OE
 *    Denmark
 *
 * $Id: gbeta.bet,v 1.45 2001/07/01 21:44:10 eernst Exp $
 *)

ORIGIN '~beta/basiclib/systemenv';
INCLUDE '../interp';
INCLUDE 'signalhandling';
BODY 'gbetabody'

-- program:descriptor --

systemenv
(# <<SLOT GbetaMainLib:attributes>>;
   deadlocked::(# <<SLOT GbetaDeadLocked:dopart>> #);
   interp: @interpreter
     (# <<SLOT GbetaInterpLib:attributes>>;
        init::(# <<SLOT GbetaInterpInit:dopart>> #);
        lazyAnalysis::(# do lazy_analysis->value #);
        createA2S::trueObject;
        printSemanticAttributes::(# do printSemAtt->value #);
        interpreterError::
          (# 
          do (* default failure mode is "failure" *)
             (if tc=maxint (* "unset" *) then failure->termCode if)
          #);
        beforeStaticAnalysis::(# <<SLOT BeforeStaticAnalysis:dopart>> #);
        beforeInstantiate::(# <<SLOT BeforeInstantiate:dopart>> #);
        beforeExecute::(# <<SLOT BeforeExecute:dopart>> #);
        
        (* static errors *)
        staticError::(# do (msg[],solution[])->staticErrors #);
        
        (* quasi-static errors *)
        cannotAssignError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        kindError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        incomparableError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        listLengthError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        
        (* dynamic errors *)
        qualificationError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        badFinalError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        mathError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        refNoneError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        patternMergeError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        unwindError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        indexError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        cycleError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        componentDoubleExecuteError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        nonSpecializableError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        lowerBoundError::
          (# do thrd[]->dumpTheStack; (msg[],thrd[],unwind##)->dynamicErrors #);
        
        (* warnings *)
        intToBoolWarning::(# <<SLOT IntToBoolWarning:dopart>> #);
        boolToIntWarning::(# <<SLOT BoolToIntWarning:dopart>> #);
        ambiguousWarning::(# <<SLOT AmbiguousWarning:dopart>> #);
        quaWarning::(# <<SLOT QuaWarning:dopart>> #);
        dynMergeWarning::(# <<SLOT DynMergeWarning:dopart>> #);
        dynMergeDupMainPartWarning::(# <<SLOT DynMergeDMPWarning:dopart>> #);
        dynSpecWarning::(# <<SLOT DynSpecWarning:dopart>> #);
        a2sWarning::(# <<SLOT A2SWarning:dopart>> #);
        
        staticErrors: 
          (# msg,solution: ^text
          enter (msg[],solution[])
          <<SLOT StaticErrors:dopart>> 
          #);
        
        handleDoubleDecl::(# <<SLOT GbetaHandleDoubleDecl:dopart>>#);
        
        dynamicErrors: 
          (# msg: ^text;
             thrd: ^thread;
             unwind: ##stackUnwinder
          enter (msg[],thrd[],unwind##)
          <<SLOT DynamicErrors:dopart>> 
          #);
        
        (* interaction *)
        
        command:
          (# name:< textValue;
             executeStopped:< executeStp;
             executeRunning:< executeRun;
             setsLastCommand:< booleanValue;
             syntax:< textValue;
             shortHelp:< textValue;
             help:< textValue;
             execute:
               (# root: ^l2AstNode; t: ^text; done: @boolean
               enter (root[],t[]) do INNER exit done
               #);
             executeStp: execute(# die: @boolean do INNER exit die #);
             executeRun: execute
               (# thrd: ^thread;
                  unwind: ##stackUnwinder
               enter (thrd[],unwind##)
               do INNER
               #);
             cannotExecute: executeStp
               (# <<SLOT GbetaCannotExecute:dopart>> #);
             cannotExecuteR: executeRun
               (# <<SLOT GbetaCannotExecuteR:dopart>> #)
          #);
        commands: @list(# element::command #)
     #);

   init: (# <<SLOT GbetaInit:dopart>> #);
   
   (* Name of file containing the starting fragment of program to run *)
   filename: ^text;
   
   (* State used to customize behaviour *)
   printEarly: @boolean; (* print entire program before static analysis *)
   printSemAtt: @boolean; (* print more info when printing main parts, ... *)
   interactive: @boolean; (* support debuggerish step/print/do interaction? *)
   generateAndSaveByteCode: @boolean; (* similar to traditional compilation *)
   generateAndSaveStaticInfo: @boolean; (* similar to traditional compilation *)
   lazy_analysis: @boolean; (* perform static analysis only when needing it? *)
   print_warnings: @boolean; (* print warnings from static analysis? *)
   verbose_startup: @boolean; (* print startup messages *)

   (* Option management *)
   gbOption:
     (# <<SLOT GbOptionLib:attributes>>;
        on_letter:< charValue; (* for "-x" style std. options *)
        off_letter:< charValue(# do on_letter->ascii.upCase->value; INNER #);
        name:< textValue; (* for "--foo" style long options *)
        explanation:< textValue;
        set_on:< set_base;
        set_off:< set_base;
        set_base:
          (* reporting to 'msgdest', perform the action (on/off) for 
           * this option; 't' is the rest of the current option string
           * possibly partially used by this action as an argument;
           * after the action, stop if error and not 'continue' *)
          (# msgdest: ^stream; t: ^text; continue: @boolean
          enter (msgdest[],t[],continue)
          do INNER
          #)
     #);
   options: @list(# element::gbOption #);
   
   (* State used during (observed) execution *)
   breakpoints: @list
     (# element::breakpoint;
        breakpoint: 
          (# init: (# enter (l2ast[],before,once) exit this(BreakPoint)[] #);
             l2ast: ^interp.l2AstNode;
             before: @boolean;
             once: @boolean;
             print: printBase(# <<SLOT GbetaBreakPointPrint:dopart>> #)
          #);
        newBreakPoint:
          (# l2ast: ^interp.l2AstNode;
             before: @boolean;
             once: @boolean;
             bp: ^breakpoint
          enter (l2ast[],before,once)
          <<SLOT GbetaBreakPointNew:dopart>>
          exit bp[]
          #);
        add:
          (# l2ast: ^interp.l2AstNode;
             before: @boolean;
             once: @boolean
          enter (l2ast[],before,once)
          <<SLOT GbetaBreakPointAdd:dopart>>
          #)
     #);
   single_stepping: @booleanObject
     (* Are we single stepping now? A normal boolean object, 
      * almost, but is forced true by SIGINT signals (Ctrl-C) *)
     (# <<SLOT GbetaSingleStepping:dopart>> #);
   kill_execution: @boolean; (* true means kill _all_ threads *)
   last_command: @text (* cache, last command is often the default command *)
   
<<SLOT GbetaMain:dopart>>
#)

-- GbetaInterpLib:attributes --

reinit: (# <<SLOT ReInitialize:dopart>> #)

(* 
 * local variables:
 * ee-beta-main-file: "~/gbeta-0.9/src/main/gbeta.bet"
 * end:
 *)
